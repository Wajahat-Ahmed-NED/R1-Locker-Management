!SESSION 2023-12-28 09:05:46.417 -----------------------------------------------
eclipse.buildId=unknown
java.fullversion=JRE 1.7.0 IBM J9 2.6 Windows 8 amd64-64 Compressed References 20130306_140761 (JIT enabled, AOT enabled)
J9VM - R26_Java726_SR4_FP1_20130306_1011_B140761
JIT  - r11.b03_20130131_32403ifx1
GC   - R26_Java726_SR4_FP1_20130306_1011_B140761_CMPRSS
J9CL - 20130306_140761
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product com.ibm.rational.rad.product.v9.ide
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product com.ibm.rational.rad.product.v9.ide

This is a continuation of log file D:\Ariz\Locker Management\R1-Locker-Management\.metadata\.bak_0.log
Created Time: 2023-12-28 12:24:35.697

!ENTRY org.eclipse.jdt.ui 4 0 2023-12-28 12:24:35.697
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationStatement(ASTConverter.java:3030)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleLocalDeclaration(ASTConverter.java:400)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:532)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:203)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:518)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2023-12-28 12:24:35.697
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package LockerManagement;
import javax.swing.JFrame;
import java.awt.Color;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.UIManager;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Point;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Scanner;
import java.awt.Font;
import javax.swing.JInternalFrame;
import javax.swing.plaf.ColorUIResource;
import javax.swing.text.DateFormatter;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.BorderLayout;
import javax.swing.JLayeredPane;
import java.awt.GridLayout;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import java.awt.Panel;
import javax.swing.border.TitledBorder;
import java.awt.Component;
import java.awt.Dimension;
import javax.swing.border.EtchedBorder;
public class newDetails extends JFrame {

	public int chk;
	public String lockerNumber;
	public Integer lockerSizeId;
	private JTextField customerNameText;
	private JTextField correspondedAddressText;
	private JTextField mobileNumberText;
	private JTextField accountNumberText;
	private JTextField lockerNumberText;
	private JTextField lockerKeyText;
	private JTextField lockerSizeText;
	private JTextField rentStatusText;
//	private JTextField operatingInstructionText;
	private JTextField depositText;
	private JTextField overdueDateText;
	private JTextField recoverDateText;
	private JTextField modeOfOperationText;
	private JComboBox modeOfOperationComboBox;
	ArrayList<Integer> availableLockers;
	public String lockerSize;
	public String paymentMode;
	private JTextField expiryDateText;
	private JTextField modeOfPaymentText;
	final JPanel DepositDetailsPanel = new JPanel();
	final JLabel lblExpiryDate = new JLabel("Expiry Date");
	HashMap<Integer, String> lockerSizeName = new HashMap<>();
	HashMap<Integer, String> rentStatus = new HashMap<>();
	//Constructor
	/**
	 * @wbp.parser.constructor
	 */
	public newDetails(final int chk)
	{
		this.chk=chk;
		customerPanel();

	}
	public newDetails(final int chk, String lockerNumber)
	{
		  // Set names using put method
        lockerSizeName.put(1, "Small");
        lockerSizeName.put(2, "Medium");
        lockerSizeName.put(3, "Large");
        rentStatus.put(0,"Assign");
        rentStatus.put(1,"Surrender");
		this.lockerNumber=lockerNumber;
		this.chk=chk;
		if (chk==1) {
			customerPanel();
			fetchDetails();
		}
//		System.out.println(lockerSizeText);

	}
public void customerPanel()
{
	getContentPane().setBackground(new Color(0, 102, 102));
	getContentPane().setLayout(null);
	setSize(new Dimension(600, 500));
	setResizable(false);
	setLocation(new Point(500, 200));
	setTitle("Customer Details");
	JPanel customerDetailsPanel = new JPanel();
	customerDetailsPanel.setForeground(new Color(0, 0, 0));
	customerDetailsPanel.setBackground(new Color(0, 102, 102));
	customerDetailsPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Customer Details", TitledBorder.LEADING, TitledBorder.TOP, null, Color.LIGHT_GRAY));
	customerDetailsPanel.setBounds(20, 10, 540, 130);
	getContentPane().add(customerDetailsPanel);
	customerDetailsPanel.setLayout(null);
	
	JLabel lblCustomerName = new JLabel("Customer Name");
	lblCustomerName.setForeground(Color.WHITE);
	lblCustomerName.setBounds(10, 20, 120, 20);
	customerDetailsPanel.add(lblCustomerName);
	
	customerNameText = new JTextField();
	customerNameText.setBounds(200, 20, 300, 20);
	customerDetailsPanel.add(customerNameText);
	customerNameText.setColumns(10);
	
	JLabel lblEmail = new JLabel("Email");
	lblEmail.setForeground(Color.WHITE);
	lblEmail.setBounds(10, 45, 150, 20);
	customerDetailsPanel.add(lblEmail);
	
	correspondedAddressText = new JTextField();
	correspondedAddressText.setBounds(200, 45, 300, 20);
	customerDetailsPanel.add(correspondedAddressText);
	correspondedAddressText.setColumns(10);
	
	JLabel lblConatctNumber = new JLabel("Contact Number");
	lblConatctNumber.setForeground(Color.WHITE);
	lblConatctNumber.setBounds(10, 70, 120, 20);
	customerDetailsPanel.add(lblConatctNumber);
	
	mobileNumberText = new JTextField();
	mobileNumberText.setBounds(200, 70, 300, 20);
	customerDetailsPanel.add(mobileNumberText);
	mobileNumberText.setColumns(10);
	
	JLabel lblAccountNumber = new JLabel("Account Number");
	lblAccountNumber.setForeground(Color.WHITE);
	lblAccountNumber.setBounds(10, 95, 120, 20);
	customerDetailsPanel.add(lblAccountNumber);
	
	accountNumberText = new JTextField();
	accountNumberText.setEditable(false);
	accountNumberText.setBounds(200, 95, 300, 20);
	customerDetailsPanel.add(accountNumberText);
	accountNumberText.setColumns(10);
	
	JPanel lockerDetailsPanel = new JPanel();
	lockerDetailsPanel.setForeground(new Color(0, 0, 0));
	lockerDetailsPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Locker Details", TitledBorder.LEADING, TitledBorder.TOP, null, Color.LIGHT_GRAY));
	lockerDetailsPanel.setBackground(new Color(0, 102, 102));
	lockerDetailsPanel.setBounds(20, 150, 540, 105);
	getContentPane().add(lockerDetailsPanel);
	lockerDetailsPanel.setLayout(null);
	
	JLabel lblNewLabel = new JLabel("Locker Number");
	lblNewLabel.setForeground(Color.WHITE);
	lblNewLabel.setBounds(10, 45, 150, 20);
	lockerDetailsPanel.add(lblNewLabel);
	
	lockerNumberText = new JTextField();
	lockerNumberText.setEditable(false);
	lockerNumberText.setBounds(200, 45, 90, 20);
	lockerDetailsPanel.add(lockerNumberText);
	lockerNumberText.setColumns(10);
	
	JLabel lblNewLabel_1 = new JLabel("Locker Key");
	lblNewLabel_1.setForeground(Color.WHITE);
	lblNewLabel_1.setBounds(300, 20, 80, 20);
	lockerDetailsPanel.add(lblNewLabel_1);
	
	lockerKeyText = new JTextField();
	lockerKeyText.setEditable(false);
	lockerKeyText.setBounds(400, 20, 100, 20);
	lockerDetailsPanel.add(lockerKeyText);
	lockerKeyText.setColumns(10);
	//if user then textfield replace to combobox
	JLabel lblNewLabel_2 = new JLabel("Locker Size");
	lblNewLabel_2.setForeground(Color.WHITE);
	lblNewLabel_2.setBounds(10, 20, 80, 20);
	JComboBox lockerSizeComboBox = new JComboBox();
	lockerSizeComboBox.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			try {
	            JComboBox<String> cb = (JComboBox<String>) e.getSource();
	            String selectedItem = (String) cb.getSelectedItem();
	            System.out.println("Selected item: " + selectedItem);
	            lockerSize=selectedItem;
	            int val=0;
	            if(selectedItem=="Small"){
	            	if(availableLockers.get(0)==3){
	            		 JOptionPane.showMessageDialog(null,"Small Locker Not Available");
	            	}
	            	else{
	            		val=1;
	            		
	            		fetchLockerDetails(val);
	            	}
	            }
	            else if (selectedItem=="Medium"){
	            
	            	if(availableLockers.get(1)==0){
	            		 JOptionPane.showMessageDialog(null,"Medium Locker Not Available");
	            	}
	            	else{
	            		val=2;
	            		fetchLockerDetails(val);
	            	}
	            }
	            else if(selectedItem=="Large"){
	            	
	            	if(availableLockers.get(2)==0){
	            		 JOptionPane.showMessageDialog(null,"Large Locker Not Available");
	            	}
	            	else{
	            		val=3;
	            		fetchLockerDetails(val);
	            	}
	            }
			} catch (Exception e2) {
				// TODO: handle exception
			}
		}
	});
	lockerSizeComboBox.setModel(new DefaultComboBoxModel(new String[] {"Small", "Medium", "Large"}));
	lockerSizeComboBox.setSelectedIndex(-1);
	lockerDetailsPanel.add(lblNewLabel_2);
	
//	operatingInstructionText = new JTextField();
//	JComboBox OperatingInstructionComboBox = new JComboBox();
//	OperatingInstructionComboBox.setModel(new DefaultComboBoxModel(new String[] {"Singly", "Either or Surviver", "Jointly by all of Us","Jointly by two of Us", "Others"}));
//	OperatingInstructionComboBox.setSelectedIndex(-1);

	modeOfOperationComboBox = new JComboBox();
	modeOfOperationComboBox.setModel(new DefaultComboBoxModel(new String[] {"Singly", "Either or Surviver", "Jointly by all of Us", "Jointly by two of Us", "Others"}));
	modeOfOperationComboBox.setSelectedIndex(-1);
	modeOfOperationComboBox.setMaximumRowCount(5);
	
	modeOfOperationText = new JTextField();
	lockerSizeText = new JTextField();
	if (chk==1 | chk==3) {

//		operatingInstructionText.setBounds(200, 70, 300, 20);
//		lockerDetailsPanel.add(operatingInstructionText);
//		operatingInstructionText.setColumns(10);
		

		lockerSizeText.setBounds(200, 20, 90, 20);
		lockerDetailsPanel.add(lockerSizeText);
		lockerSizeText.setColumns(10);
		lockerSizeText.setEditable(false);
		modeOfOperationText.setBounds(200, 70, 300, 20);
		lockerDetailsPanel.add(modeOfOperationText);
		modeOfOperationText.setColumns(10);
	}
	else if(chk==0){
//		OperatingInstructionComboBox.setBounds(200, 67, 300, 22);
//		lockerDetailsPanel.add(OperatingInstructionComboBox);
		lockerSizeComboBox.setBounds(200, 20, 90, 20);
		lockerDetailsPanel.add(lockerSizeComboBox);
		modeOfOperationComboBox.setBounds(200, 70, 300, 20);
		lockerDetailsPanel.add(modeOfOperationComboBox);
//		OperatingInstructionComboBox.addActionListener(new ActionListener() {
//			public void actionPerformed(ActionEvent e) {
//			});
		modeOfOperationComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					
				} catch (Exception e2) {
					// TODO: handle exception
				}
			}
			});
	}
	if(chk==1)
	{
		JButton rejectButton = new JButton("Reject");
	    rejectButton.addActionListener(new ActionListener() {
	    	public void actionPerformed(ActionEvent arg0) {
	    		 JPanel panel = new JPanel();
	    	        JTextArea textArea = new JTextArea(5, 20);
	    	        JScrollPane scrollPane = new JScrollPane(textArea);
	    	        panel.add(scrollPane);
	    	        UIManager.put("OptionPane.background", new ColorUIResource(0, 102, 102));
			        UIManager.put("Panel.background", new ColorUIResource(0, 102, 102));
	    	        Object[] options = { "Reject", "Cancel" };

	    	        // Show the confirm dialog with custom button labels
	    	        int result = JOptionPane.showOptionDialog(null, panel, "Enter Comments", JOptionPane.OK_CANCEL_OPTION,
	    	                JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
	    	        // Check if the user clicked the OK button
	    	        if (result == JOptionPane.OK_OPTION) {
	    	            String comment = textArea.getText();
	    	            try {

							Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
							java.sql.Connection connection = null;
							java.sql.Statement  lcl_stmt =null;
							connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
							
							PreparedStatement statement = connection.prepareStatement("select * from lockerassigned_tr where LOCKERNUM=?");
						
							statement.setString(1,lockerNumber);
							
						
							ResultSet result2 = statement.executeQuery();
							System.out.println("DB successful");
								if (result2.next()) {
									int ASSIGNEDID = result2.getInt("ASSIGNEDID");
					                int VOUCHERID = result2.getInt("VOUCHERID");
					                int CUSTOMERID = result2.getInt("CUSTOMERID");
					                int DEPOSITAMOUNT = result2.getInt("DEPOSITAMOUNT");
					                String OVERDUE = result2.getString("OVERDUE");
					                String LASTRECOVERDATE = result2.getString("LASTRECOVERDATE");
					                int RENTSTATUS = result2.getInt("RENTSTATUS");
					                String ASSIGNEDDATE = result2.getString("ASSIGNEDDATE");
					                String COMMENTS = result2.getString("COMMENTS");
					                int NOTIFYUSER = result2.getInt("NOTIFYUSER");
					                String LOCKERNUM = result2.getString("LOCKERNUM");
					                String insertQuery="";
					                String deleteQuery="DELETE FROM lockerassigned_tr WHERE LOCKERNUM=?";
					                String deleteTl= "DELETE FROM lockerassigned_tl WHERE LOCKERNUM=?";
					                
					                System.out.println("next");
					                //Insert
					                	SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
					                    Date currentDate = new Date(System.currentTimeMillis());
						                ASSIGNEDDATE=formatter.format(currentDate);
						                System.out.println(ASSIGNEDDATE);
						                 insertQuery = "INSERT INTO lockerassigned_tl (ASSIGNEDID, VOUCHERID,CUSTOMERID,DEPOSITAMOUNT," +
						                "OVERDUE,LASTRECOVERDATE,RENTSTATUS,ASSIGNEDDATE,COMMENTS,NOTIFYUSER,LOCKERNUM) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
						                
						                }
						                else if(RENTSTATUS==1)
						                {
						                	  insertQuery = "INSERT INTO lockerassigned_ht (ASSIGNEDID, VOUCHERID,CUSTOMERID,DEPOSITAMOUNT," +
										     "OVERDUE,LASTRECOVERDATE,RENTSTATUS,ASSIGNEDDATE,COMMENTS,NOTIFYUSER,LOCKERNUM) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
										}
					                
					                PreparedStatement insertStatement = connection.prepareStatement(insertQuery);
					                insertStatement.setInt(1, ASSIGNEDID);
					                insertStatement.setInt(2, VOUCHERID);
					                insertStatement.setInt(3, CUSTOMERID);
					                insertStatement.setInt(4, DEPOSITAMOUNT);
					                insertStatement.setString(5, OVERDUE);
					                insertStatement.setString(6, LASTRECOVERDATE);
					                insertStatement.setInt(7, RENTSTATUS);
					                insertStatement.setString(8, ASSIGNEDDATE);
					                insertStatement.setString(9, COMMENTS);
					                insertStatement.setInt(10, NOTIFYUSER);
					                insertStatement.setString(11, LOCKERNUM);
					                // Set other column values as needed

					                int res=insertStatement.executeUpdate();
					                System.out.println("next");
					                System.out.println(res);
					                if(res>0){
					                	
					                	System.out.println("new");
					                	System.out.println(res);

					                	if(RENTSTATUS==1)
					                	{
					                		PreparedStatement delete = connection.prepareStatement(deleteTl);
					                		delete.setString(1, lockerNumber);
					                		delete.execute();
					                	}
	            		                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
	            		                deleteStatement.setString(1, lockerNumber);
	            		                deleteStatement.execute();
					                	System.out.println("delete");
					                	
					                }
					                
					                result.close();
					                statement.close();
					                connection.close();
					       
					                System.out.println("Row inserted successfully!");
					                JOptionPane.showMessageDialog(null, "Authorize");
					                
								}
					
							if (rowsUpdated!=0) {
								UIManager.put("OptionPane.background", new ColorUIResource(255, 255, 255));
								UIManager.put("Panel.background", new ColorUIResource(255, 255, 255));
					            JOptionPane.showMessageDialog(null, "<html>Your Comment:<br>" + comment + "<br>send to User</html>");
							}
						} catch (Exception e) {
							// TODO: handle exception
							System.out.print(e.getMessage());
						}
	    	            newMainMenu obj = new newMainMenu(1);
	    		    	obj.setSize(600, 500);
	    		    	obj.setVisible(true);
	    		    	dispose();
	    	        } else if (result == JOptionPane.CANCEL_OPTION) {
	    	            // Close the JOptionPane
	    	            System.exit(0);
	    	        }
	    	}
	    });
	    rejectButton.setBounds(20, 410, 90, 30);
	    getContentPane().add(rejectButton);
	    
	    JButton referBackButton = new JButton("Refer Back");
	    referBackButton.addActionListener(new ActionListener() {
	    	public void actionPerformed(ActionEvent arg0) {
	   		 JPanel panel = new JPanel();
		        JTextArea textArea = new JTextArea(5, 20);
		        JScrollPane scrollPane = new JScrollPane(textArea);
		        panel.add(scrollPane);
		        UIManager.put("OptionPane.background", new ColorUIResource(0, 102, 102));
		        UIManager.put("Panel.background", new ColorUIResource(0, 102, 102));
		        // Set the background color of the pop-up box
		        Object[] options = { "Refer Back", "Cancel" };

		        // Show the confirm dialog with custom button labels
		        int result = JOptionPane.showOptionDialog(null, panel, "Enter Comments", JOptionPane.OK_CANCEL_OPTION,
		                JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
		        
		        // Check if the user clicked the OK button
		        if (result == JOptionPane.OK_OPTION) {
			            String comment = textArea.getText();

				            try {
				            	Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
								java.sql.Connection connection = null;
								java.sql.Statement  lcl_stmt =null;
								connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
								
								PreparedStatement statement = connection.prepareStatement("UPDATE lockerassigned_tr SET COMMENTS = ?, NOTIFYUSER = ? WHERE LOCKERNUM = ? ;");				
								statement.setString(1,comment);
								statement.setInt(2,1);
								statement.setString(3,lockerNumber);
								
								int rowsUpdated = statement.executeUpdate();
								System.out.print(comment);
								if (rowsUpdated!=0) {
									UIManager.put("OptionPane.background", new ColorUIResource(255, 255, 255));
									UIManager.put("Panel.background", new ColorUIResource(255, 255, 255));
						            JOptionPane.showMessageDialog(null, "<html>Your Comment:<br>" + comment + "<br>send to User</html>");
								}
							} catch (Exception e) {
								// TODO: handle exception
								System.out.print(e.getMessage());
							}
			            newMainMenu obj = new newMainMenu(1);
				    	obj.setSize(600, 500);
				    	obj.setVisible(true);
				    	dispose();
		        } else if (result == JOptionPane.CANCEL_OPTION) {
		            // Close the JOptionPane
		            System.exit(0);
		        }
		}
	    });
	    referBackButton.setBounds(120, 410, 100, 30);
	    getContentPane().add(referBackButton);

	}
	
	JLabel lblLockerStatus = new JLabel("Rent Status");
	lblLockerStatus.setForeground(Color.WHITE);
	lblLockerStatus.setBounds(300, 45, 80, 20);
	lockerDetailsPanel.add(lblLockerStatus);
	
	rentStatusText = new JTextField();
	rentStatusText.setEditable(false);
	rentStatusText.setBounds(400, 45, 100, 20);
	lockerDetailsPanel.add(rentStatusText);
	rentStatusText.setColumns(10);
	
	JLabel lblNewLabel_9 = new JLabel("Mode Of Operation");
	lblNewLabel_9.setForeground(Color.WHITE);
	lblNewLabel_9.setBounds(10, 70, 120, 20);
	lockerDetailsPanel.add(lblNewLabel_9);
	
	DepositDetailsPanel.setForeground(new Color(0, 0, 0));
	DepositDetailsPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Rent & Security Deposit Details", TitledBorder.LEADING, TitledBorder.TOP, null, Color.LIGHT_GRAY));
	DepositDetailsPanel.setBackground(new Color(0, 102, 102));
	DepositDetailsPanel.setBounds(20, 265, 540, 100);
	// DepositDetailsPanel.setBounds(20, 290, 540, 125);
	getContentPane().add(DepositDetailsPanel);
	DepositDetailsPanel.setLayout(null);
	final JLabel lbldateFormat = new JLabel("Date format: dd/MM/yyyy");
	JLabel lblNewLabel_4 = new JLabel("Mode Of Payment");
	lblNewLabel_4.setForeground(Color.WHITE);
	lblNewLabel_4.setBounds(10, 20, 120, 20);
	DepositDetailsPanel.add(lblNewLabel_4);

	lblExpiryDate.setForeground(Color.WHITE);
	depositText = new JTextField();
	depositText.setBounds(200, 45, 90, 20);
	DepositDetailsPanel.add(depositText);
	depositText.setColumns(10);
	
	JLabel lblNewLabel_6 = new JLabel("Overdue Date");
	lblNewLabel_6.setForeground(Color.WHITE);
	lblNewLabel_6.setBounds(300, 45, 80, 20);
	DepositDetailsPanel.add(lblNewLabel_6);
	
	overdueDateText = new JTextField();
	overdueDateText.setBounds(400, 45, 100, 20);
	DepositDetailsPanel.add(overdueDateText);
	overdueDateText.setColumns(10);
	
	JLabel lblNewLabel_7 = new JLabel("Last Rent Recover Date");
	lblNewLabel_7.setForeground(Color.WHITE);
	lblNewLabel_7.setBounds(10, 70, 150, 20);
	DepositDetailsPanel.add(lblNewLabel_7);
	
	recoverDateText = new JTextField();
	recoverDateText.setBounds(200, 70, 90, 20);
	DepositDetailsPanel.add(recoverDateText);
	recoverDateText.setColumns(10);
	
	////

	//Mode of Payment
	if(chk==0 | chk==2)
	{
				JComboBox modeOfPaymentComboBox = new JComboBox();
				modeOfPaymentComboBox.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								try {
									
					            JComboBox<String> cb = (JComboBox<String>) e.getSource();
					            String selectedItem = (String) cb.getSelectedItem();
					            System.out.println("Selected item: " + selectedItem);
					            paymentMode=selectedItem;
					            
					            int val=0;
					            if(selectedItem=="Complementary"){
					            	// Set the new bounds here
					            		DepositDetailsPanel.setBounds(20, 265, 540, 125);
					            		lblExpiryDate.setBounds(10, 95, 150, 20);
					            		lblExpiryDate.setForeground(Color.WHITE);
					            		DepositDetailsPanel.add(lblExpiryDate);
					                   	lblExpiryDate.setVisible(true);
					            		expiryDateText = new JTextField();
					            		expiryDateText.setBounds(200, 95, 90, 20);
					                    expiryDateText.setVisible(true);
					            		DepositDetailsPanel.add(expiryDateText);
					            		expiryDateText.setColumns(10);
					            		
//					            		lbldateFormat = new JLabel()
					            		lbldateFormat.setBounds(300, 95, 150, 20);
					            		lbldateFormat.setForeground(new Color(0, 0, 0));					            		
					            		DepositDetailsPanel.add(lbldateFormat);
					            		lbldateFormat.setForeground(Color.WHITE);
					            		lbldateFormat.setVisible(true);
					            		lbldateFormat.setEnabled(false);
					            		
					            		expiryDateText.addFocusListener(new FocusAdapter() {
					            			@Override
					            			public void focusLost(FocusEvent e) {
					            				
					            				
					            				///
					            				String text=expiryDateText.getText();
					            				System.out.print(text);
					            				boolean ans=formatDate(text);
					            				if(!ans){
					            					JOptionPane.showMessageDialog(null,"Invalid Date");
					            				}
					            				
					            			}
					            		});
					                 // Repaint the panel to reflect changes
						                 DepositDetailsPanel.revalidate();
						                 DepositDetailsPanel.repaint();
					            	
					            }
					            else if (selectedItem=="Security Deposit" || selectedItem=="Yearly Rent"){
					            	DepositDetailsPanel.setBounds(20, 265, 540, 100);
					            	DepositDetailsPanel.revalidate();
					                DepositDetailsPanel.repaint();
					                expiryDateText.setVisible(false);
					            	lblExpiryDate.setVisible(false);
					            	lbldateFormat.setVisible(false);
					            	
					            }
								} catch (Exception e2) {
									// TODO: handle exception
								}
							}
							});

					modeOfPaymentComboBox.setMaximumRowCount(3);
					modeOfPaymentComboBox.setModel(new DefaultComboBoxModel(new String[] {"Complementary", "Security Deposit", "Yearly Rent"}));
					modeOfPaymentComboBox.setSelectedIndex(-1);
					modeOfPaymentComboBox.setBounds(200, 20, 300, 20);
					DepositDetailsPanel.add(modeOfPaymentComboBox);
				}
				else if(chk==1 | chk==3)
				{
					modeOfPaymentText = new JTextField();
					modeOfPaymentText.setBounds(200, 20, 300, 20);
					DepositDetailsPanel.add(modeOfPaymentText);
					modeOfPaymentText.setColumns(10);	
					customerNameText.setEditable(false);
					correspondedAddressText.setEditable(false);
					mobileNumberText.setEditable(false);
					accountNumberText.setEditable(false);
					lockerSizeText.setEditable(false);
					lockerKeyText.setEditable(false);
					lockerNumberText.setEditable(false);
					rentStatusText.setEditable(false);
//					operatingInstructionText.setEditable(false);
					modeOfOperationText.setEditable(false);
					modeOfPaymentText.setEditable(false);
					depositText.setEditable(false);
					overdueDateText.setEditable(false);
					recoverDateText.setEditable(false);

				}
				if(chk==2)
				{
					lockerSizeText.setBounds(200, 20, 90, 20);
					lockerDetailsPanel.add(lockerSizeText);
					lockerSizeText.setColumns(10);
					lockerSizeText.setEnabled(false);

//					operatingInstructionText.setEditable(true);
					depositText.setEditable(true);
					overdueDateText.setEditable(true);
					recoverDateText.setEditable(true);
					modeOfOperationComboBox.setBounds(200, 70, 300, 20);
					lockerDetailsPanel.add(modeOfOperationComboBox);
//					OperatingInstructionComboBox.addActionListener(new ActionListener() {
//						public void actionPerformed(ActionEvent e) {
//						});
					modeOfOperationComboBox.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) {
					
						}
						});
				}
	JLabel lblNewLabel_5 = new JLabel("Rent/Security Deposit");
	lblNewLabel_5.setForeground(Color.WHITE);
	lblNewLabel_5.setBounds(10, 45, 150, 20);
	DepositDetailsPanel.add(lblNewLabel_5);
	
	
	JButton backButton = new JButton("Back");
	backButton.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			if (chk==0) {
				newLockerIssuance obj=new newLockerIssuance(0);
				obj.setVisible(true);
				obj.setSize(600, 500);
				dispose();
			}else if(chk==1){
				newGrid obj=new newGrid(1);
				obj.setVisible(true);
				obj.setSize(600, 500);
				dispose();
			}
			else if(chk==2){
				newLockerMaintenance obj=new newLockerMaintenance(2);
				obj.setVisible(true);
				obj.setSize(600, 500);
				dispose();
			}
			else if(chk==3){
				newLockerMaintenance obj=new newLockerMaintenance(3);
				obj.setVisible(true);
				obj.setSize(600, 500);
				dispose();
			}
			
			
		}
	});
	backButton.setBounds(370, 410, 90, 30);
	getContentPane().add(backButton);
	
	JButton signOffButton = new JButton("Sign Off");
	signOffButton.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent arg0) {
			newLogIn obj=new newLogIn();
			obj.setVisible(true);
			obj.setSize(600, 500);
			dispose();
		}
	});
	signOffButton.setBounds(470, 410, 90, 30);
	getContentPane().add(signOffButton);
//date
	newMainMenu date = new newMainMenu(1);
    JLabel dateLabel = new JLabel(date.getCurrentDate());
    dateLabel.setForeground(Color.WHITE);
    dateLabel.setHorizontalAlignment(SwingConstants.LEFT);
    dateLabel.setVerticalAlignment(SwingConstants.BOTTOM);
    dateLabel.setBounds(10, 440, 570, 20);
    getContentPane().add(dateLabel);
    
    JButton saveButton = new JButton(chk==1 ? "Authorize" : chk==2 ? "Update": chk==3 ? "Surrender": "Save");
    saveButton.addActionListener(new ActionListener() {
    	public void actionPerformed(ActionEvent arg0) {
    		if(chk==0)
    		{
    			//user query 
    			
	            JOptionPane.showMessageDialog(null, "Save");
    		}else if(chk==1){
				//authorizer
    			try {
						Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
						java.sql.Connection connection = null;
						java.sql.Statement  lcl_stmt =null;
						connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
						
						PreparedStatement statement = connection.prepareStatement("select * from lockerassigned_tr where LOCKERNUM=?");
					
						statement.setString(1,lockerNumber);
						
					
						ResultSet result = statement.executeQuery();
						System.out.println("DB successful");
							if (result.next()) {
								int ASSIGNEDID = result.getInt("ASSIGNEDID");
				                int VOUCHERID = result.getInt("VOUCHERID");
				                int CUSTOMERID = result.getInt("CUSTOMERID");
				                int DEPOSITAMOUNT = result.getInt("DEPOSITAMOUNT");
				                String OVERDUE = result.getString("OVERDUE");
				                String LASTRECOVERDATE = result.getString("LASTRECOVERDATE");
				                int RENTSTATUS = result.getInt("RENTSTATUS");
				                String ASSIGNEDDATE = result.getString("ASSIGNEDDATE");
				                String COMMENTS = result.getString("COMMENTS");
				                int NOTIFYUSER = result.getInt("NOTIFYUSER");
				                String LOCKERNUM = result.getString("LOCKERNUM");
				                String insertQuery="";
				                String deleteQuery="DELETE FROM lockerassigned_tr WHERE LOCKERNUM=?";
				                String deleteTl= "DELETE FROM lockerassigned_tl WHERE LOCKERNUM=?";
				                
				                System.out.println("next");
				                //Insert
				                if(RENTSTATUS==0)
				                {
				                	SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
				                    Date currentDate = new Date(System.currentTimeMillis());
					                ASSIGNEDDATE=formatter.format(currentDate);
					                System.out.println(ASSIGNEDDATE);
					                 insertQuery = "INSERT INTO lockerassigned_tl (ASSIGNEDID, VOUCHERID,CUSTOMERID,DEPOSITAMOUNT," +
					                "OVERDUE,LASTRECOVERDATE,RENTSTATUS,ASSIGNEDDATE,COMMENTS,NOTIFYUSER,LOCKERNUM) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
					                
					                }
					                else if(RENTSTATUS==1)
					                {
					                	  insertQuery = "INSERT INTO lockerassigned_ht (ASSIGNEDID, VOUCHERID,CUSTOMERID,DEPOSITAMOUNT," +
									     "OVERDUE,LASTRECOVERDATE,RENTSTATUS,ASSIGNEDDATE,COMMENTS,NOTIFYUSER,LOCKERNUM) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
									}
				                
				                PreparedStatement insertStatement = connection.prepareStatement(insertQuery);
				                insertStatement.setInt(1, ASSIGNEDID);
				                insertStatement.setInt(2, VOUCHERID);
				                insertStatement.setInt(3, CUSTOMERID);
				                insertStatement.setInt(4, DEPOSITAMOUNT);
				                insertStatement.setString(5, OVERDUE);
				                insertStatement.setString(6, LASTRECOVERDATE);
				                insertStatement.setInt(7, RENTSTATUS);
				                insertStatement.setString(8, ASSIGNEDDATE);
				                insertStatement.setString(9, COMMENTS);
				                insertStatement.setInt(10, NOTIFYUSER);
				                insertStatement.setString(11, LOCKERNUM);
				                // Set other column values as needed

				                int res=insertStatement.executeUpdate();
				                System.out.println("next");
				                System.out.println(res);
				                if(res>0){
				                	
				                	System.out.println("new");
				                	System.out.println(res);

				                	if(RENTSTATUS==1)
				                	{
				                		PreparedStatement delete = connection.prepareStatement(deleteTl);
				                		delete.setString(1, lockerNumber);
				                		delete.execute();
				                	}
            		                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
            		                deleteStatement.setString(1, lockerNumber);
            		                deleteStatement.execute();
				                	System.out.println("delete");
				                	
				                }
				                
				                result.close();
				                statement.close();
				                connection.close();
				       
				                System.out.println("Row inserted successfully!");
				                JOptionPane.showMessageDialog(null, "Authorize");
				                
							}
				} catch (Exception e) {
					// TODO: handle exception
					System.out.println(e.getMessage());
//					e.printStackTrace();
				}
//    			try {
//					Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
//					java.sql.Connection connection = null;
//					java.sql.Statement  lcl_stmt =null;
//					connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
//					String deleteQuery = "DELETE FROM lockerassigned_tr WHERE LOCKERNUM=?";
//
//	                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
//	                deleteStatement.executeUpdate();
//	                deleteStatement.close();
//	                connection.close();
//					
//				} catch (Exception e) {
//					// TODO: handle exception
//					System.out.println("connection fail! FOR DELETE QUERY");
//				}
			}else if(chk==2){
				//authorizer
    			
	            JOptionPane.showMessageDialog(null, "Maintenance");
			}else if(chk==3){
				//authorizer
    			
	            JOptionPane.showMessageDialog(null, "Surrender");
			}
    	}
    });
    saveButton.setBounds(260, 410, 100, 30);
    getContentPane().add(saveButton);
    
    }
	
	// functions declarations
	public boolean formatDate(String inp){
		Scanner scanner = new Scanner(System.in);
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        sdf.setLenient(false); // Set lenient property to false
        try {
            java.util.Date date = sdf.parse(inp);
            int month = date.getMonth() + 1; // Extract month value
            if (month > 12) {
            	JOptionPane.showMessageDialog(null,"Invalid Month");
                System.out.println("Invalid month. Please enter a month between 1 and 12.");
                return false;
            }
            System.out.println("The date you entered is: "+ sdf.format(date));
  //          System.out.println("The date you entered is: " +  new Date());
            Date currentDate = new Date();
            return !date.before(currentDate);
        } catch (ParseException e) {
            System.out.println("Invalid date format. Please try again.");
            return false;
        }
	}
	
	
	public static boolean validateDate(String dateString) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        dateFormat.setLenient(false); // Disallow lenient parsing

        try {
            Date date = dateFormat.parse(dateString);
            Date currentDate = new Date(); // Get the current date
//            System.out.println(date);
//            System.out.println(currentDate);
            System.out.println("The date you entered is: " + date.getDate()+"  "+ date.getMonth()+ "  "+date.getYear());
            return !date.before(currentDate); // Check if the date is not before the current date
        } catch (ParseException e) {
        	System.out.println(e.getMessage());
            return false; // Invalid date format
        }
    }
	
	
	
	public void insertData(HashMap<String,String> custAccRelation ){
		
//		this.accountNum=custAccRelation.get("accountnum");
//		this.branchcodeid=custAccRelation.get("branchcodeid");
//		customerNameText.setText(custAccRelation.get("customername"));
//		contactInformationText.setText(custAccRelation.get("contactno"));
//		emailText.setText(custAccRelation.get("email"));
//		customerNameText.setEditable(false);
//		contactInformationText.setEditable(false);
//		emailText.setEditable(false);
//		titleOfAccountText.setText(custAccRelation.get("accounttitle"));
//		operatingInstructionText.setText(custAccRelation.get("operatinginstruction"));
////		openInBranchText.setText(custAccRelation.get("branchcode"));
//		titleOfAccountText.setEditable(false);
//		operatingInstructionText.setEditable(false);
////		openInBranchText.setEditable(false);
	}
//	
//	
//	
//	public void insertArray(ArrayList<Integer> arr){
//		availableLockers=arr;
//	}
	
	
	
	public void fetchLockerDetails(int val){
		try{
			lockerSizeId=val;
			Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
			java.sql.Connection connection = null;
			java.sql.Statement  lcl_stmt =null;
			connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
						
			String query="select l.lockersizeid,l.lockersize,c.charges, s.secdeposit from lockersize l,lockercharges c,lockersecuritydeposit s where l.lockerchargesid=c.lockerchargesid and l.secdepositid=s.secdepositid and l.lockersizeid=?;";
			PreparedStatement statement = connection.prepareStatement(query);
			
			statement.setInt(1, val);
			
			ResultSet result = statement.executeQuery();
			
			if (result.next()) {
//			    String secDeposit = result.getString("SECDEPOSIT");
//			    Integer charges= result.getInt("CHARGES");
//			    
//			   securityDepositText.setEnabled(true);
//			   yearlyRentText.setEnabled(true);
//			   
//			   securityDepositText.setText(secDeposit);
//			   yearlyRentText.setText(Integer.toString(charges));
//			    		
//			     	 
//			   securityDepositLabel.setEnabled(true);
//			   yearlyRentLabel.setEnabled(true);
//			    
//			   
			}
			
		}
		catch(Exception e){
			System.out.println(e.getMessage());
			 JOptionPane.showMessageDialog(null,"DB Connection Failed");
		}
	
	}

	// customer Details fetching function
	public void getCustDetails(String lockerNumber){
			
			try{
				
				Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
				java.sql.Connection connection = null;
				java.sql.Statement  lcl_stmt =null;
				connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
							
				String query="select c.customerid,c.customername,c.email, c.contactno  from Accountnew a, customerAccountRelationship r, customer c where a.accountNum=r.accountNum and r.customerId=c.customerid and a.accountNum=?;";
				PreparedStatement statement = connection.prepareStatement(query);
				
				statement.setString(1, lockerNumber);
				
				ResultSet result = statement.executeQuery();
				
				String queryAccount="select  a.accountNum,a.accounttitle, a.branchCode, o.operatinginstruction from accountnew a,operatinginstruction o where a.operatinginstructionid=o.operatinginstructionid  and accountnum=?;";
				PreparedStatement statementAccount = connection.prepareStatement(queryAccount);
				
				statementAccount.setString(1, lockerNumber);
				
				ResultSet resultAccount = statementAccount.executeQuery();
				
				HashMap<String, String> customerAccountRelationship = new HashMap<String, String>();
				if(resultAccount.next()){
					customerAccountRelationship.put("accounttitle",resultAccount.getString("ACCOUNTTITLE")) ;
					Global.accountNum(resultAccount.getString("ACCOUNTNUM"));
					int branchCode=resultAccount.getInt("BRANCHCODE");
					if(branchCode==1001){
						customerAccountRelationship.put("branchcode","No - Digital Account") ;
					}
					else{
						customerAccountRelationship.put("branchcode","Yes - "+ Integer.toString(resultAccount.getInt("BRANCHCODE"))) ;
					}
					customerAccountRelationship.put("branchcodeid",Integer.toString(resultAccount.getInt("BRANCHCODE"))) ;
					customerAccountRelationship.put("operatinginstruction", resultAccount.getString("OPERATINGINSTRUCTION")) ;
					customerAccountRelationship.put("accountnum", resultAccount.getString("ACCOUNTNUM")) ;
	
				}
				
				
				
				if (result.next()) {
					customerAccountRelationship.put("customername",result.getString("CUSTOMERNAME")) ;
					customerAccountRelationship.put("contactno",result.getString("CONTACTNO")) ;
					customerAccountRelationship.put("email", result.getString("EMAIL")) ;
					Global.customerId= result.getInt("customerid");
				    customerDetails obj= new customerDetails(0);
				    	obj.insertData(customerAccountRelationship);
				    	obj.insertArray(availableLockers);
						obj.setVisible(true);
						obj.setSize(600,500);
						dispose();
				  
				   
				}
				else{
					 JOptionPane.showMessageDialog(null,"Customer Details Not Found");
				}
			}
			catch(Exception e){
				JOptionPane.showMessageDialog(null,"Could not connect to DB");
				System.out.println(e);
			}
			
			
			
	}
	public void fetchDetails()
	{
		try {
		Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
		java.sql.Connection connection = null;
		java.sql.Statement  lcl_stmt =null;
		connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
		
		PreparedStatement statement = connection.prepareStatement("select temp.customername,temp.email, temp.contactno,temp.accountNum,temp.lockerno,temp.lockersizeid,temp.keynum, temp.rentstatus,temp.depositamount,temp.overdue, temp.lastrecoverdate, p.modeofpayment,p.expiry_date, o.modeofoperation from modeofpayment p,("
				+ "select *,tr.lockernum as lockerno  from lockerAssigned_tr tr, locker l,customer c, voucher_master_tl v where tr.lockernum=l.lockernum and tr.voucherid=v.voucherid and tr.customerid=c.customerid and tr.lockernum=?) temp"
				+ ", modeofoperation o where temp.modeofoperationid=o.modeofoperationid and temp.modeofpaymentid=p.modeofpaymentid;");
	
		statement.setString(1,lockerNumber);
		ResultSet result = statement.executeQuery();
		System.out.println("After Execution");
		
		if (result.next()) {
//			System.out.println(result.getString("AUTH"));
//			Global.userId=result.getInt("USERID");
			customerNameText.setText(result.getString("CUSTOMERNAME"));
			correspondedAddressText.setText(result.getString("EMAIL"));
			mobileNumberText.setText(result.getString("CONTACTNO"));
			
			accountNumberText.setText(result.getString("ACCOUNTNUM"));
			
			lockerSizeText.setText(lockerSizeName.get(result.getInt("LOCKERSIZEID")));
			
			lockerKeyText.setText(result.getString("KEYNUM"));
			
			rentStatusText.setText(rentStatus.get(result.getInt("RENTSTATUS")));
			lockerNumberText.setText(result.getString("LOCKERNO"));
			
			modeOfOperationText.setText(result.getString("MODEOFOPERATION"));
			
			modeOfPaymentText.setText(result.getString("MODEOFPAYMENT"));
//			depositText.setText(result.getString("DEPOSITAMOUNT"));
			
			overdueDateText.setText(result.getString("OVERDUE"));
			depositText.setText(Integer.toString(result.getInt("DEPOSITAMOUNT")));
			recoverDateText.setText(result.getString("LASTRECOVERDATE"));
			
			if(result.getString("MODEOFOPERATION").equals("Complementary")) {
//				expiryTextField = new JTextField();
//				expiryTextField.setBounds(400, 70, 100, 20);
//				DepositDetailsPanel.add(expiryTextField);
//				expiryTextField.setColumns(10);
//				expiryTextField.setText(result.getString("EXPIRY_DATE"));
//				expiryTextField.setEditable(false);
//				
//				JLabel lblNewLabel_3 = new JLabel("Expiry");
//				lblNewLabel_3.setForeground(new Color(255, 255, 255));
//				lblNewLabel_3.setBounds(300, 73, 56, 14);
//				DepositDetailsPanel.add(lblNewLabel_3);
				
				
				
				DepositDetailsPanel.setBounds(210, 265, 540, 125);
        		lblExpiryDate.setBounds(10, 95, 150, 20);
        		lblExpiryDate.setForeground(Color.WHITE);
        		DepositDetailsPanel.add(lblExpiryDate);
               	lblExpiryDate.setVisible(true);
        		expiryDateText = new JTextField();
        		expiryDateText.setBounds(200, 95, 90, 20);
                expiryDateText.setVisible(true);
        		DepositDetailsPanel.add(expiryDateText);
        		expiryDateText.setColumns(10);
        		
        		
        		
				
				
//        		DepositDetailsPanel.add(expiryTextField);
//        		
//        		DepositDetailsPanel.setForeground(new Color(0, 0, 0));
//        		DepositDetailsPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Rent & Security Deposit Details", TitledBorder.LEADING, TitledBorder.TOP, null, Color.LIGHT_GRAY));
//        		DepositDetailsPanel.setBackground(new Color(0, 102, 102));
//        		DepositDetailsPanel.setBounds(20, 265, 540, 100);
//        		 DepositDetailsPanel.revalidate();
//                 DepositDetailsPanel.repaint();
                 
			}
		
		}
		else
		{
			JOptionPane.showMessageDialog(null,"Locker Number Not Found");
		}
		
	} catch (Exception e) {
		System.out.println(e.getMessage());
		// TODO: handle exception
		System.out.println("DB Connection fail");
		JOptionPane.showMessageDialog(null,"DB Connection Failed");
	}
	}
	 public static void main(String[] args) {
		 newDetails frame = new newDetails(1,"A120");
	    	frame.setSize(600, 500);
	    	frame.setVisible(true);
	    	
	    }
}


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationStatement(ASTConverter.java:3030)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleLocalDeclaration(ASTConverter.java:400)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:532)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:203)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:518)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2023-12-28 12:24:35.697
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationStatement(ASTConverter.java:3030)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleLocalDeclaration(ASTConverter.java:400)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:532)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:203)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:518)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2023-12-28 12:24:35.697
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationStatement(ASTConverter.java:3030)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleLocalDeclaration(ASTConverter.java:400)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:532)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:203)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:518)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2023-12-28 12:24:39.527
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package LockerManagement;
import javax.swing.JFrame;
import java.awt.Color;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.UIManager;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Point;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Scanner;
import java.awt.Font;
import javax.swing.JInternalFrame;
import javax.swing.plaf.ColorUIResource;
import javax.swing.text.DateFormatter;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.BorderLayout;
import javax.swing.JLayeredPane;
import java.awt.GridLayout;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import java.awt.Panel;
import javax.swing.border.TitledBorder;
import java.awt.Component;
import java.awt.Dimension;
import javax.swing.border.EtchedBorder;
public class newDetails extends JFrame {

	public int chk;
	public String lockerNumber;
	public Integer lockerSizeId;
	private JTextField customerNameText;
	private JTextField correspondedAddressText;
	private JTextField mobileNumberText;
	private JTextField accountNumberText;
	private JTextField lockerNumberText;
	private JTextField lockerKeyText;
	private JTextField lockerSizeText;
	private JTextField rentStatusText;
//	private JTextField operatingInstructionText;
	private JTextField depositText;
	private JTextField overdueDateText;
	private JTextField recoverDateText;
	private JTextField modeOfOperationText;
	private JComboBox modeOfOperationComboBox;
	ArrayList<Integer> availableLockers;
	public String lockerSize;
	public String paymentMode;
	private JTextField expiryDateText;
	private JTextField modeOfPaymentText;
	final JPanel DepositDetailsPanel = new JPanel();
	final JLabel lblExpiryDate = new JLabel("Expiry Date");
	HashMap<Integer, String> lockerSizeName = new HashMap<>();
	HashMap<Integer, String> rentStatus = new HashMap<>();
	//Constructor
	/**
	 * @wbp.parser.constructor
	 */
	public newDetails(final int chk)
	{
		this.chk=chk;
		customerPanel();

	}
	public newDetails(final int chk, String lockerNumber)
	{
		  // Set names using put method
        lockerSizeName.put(1, "Small");
        lockerSizeName.put(2, "Medium");
        lockerSizeName.put(3, "Large");
        rentStatus.put(0,"Assign");
        rentStatus.put(1,"Surrender");
		this.lockerNumber=lockerNumber;
		this.chk=chk;
		if (chk==1) {
			customerPanel();
			fetchDetails();
		}
//		System.out.println(lockerSizeText);

	}
public void customerPanel()
{
	getContentPane().setBackground(new Color(0, 102, 102));
	getContentPane().setLayout(null);
	setSize(new Dimension(600, 500));
	setResizable(false);
	setLocation(new Point(500, 200));
	setTitle("Customer Details");
	JPanel customerDetailsPanel = new JPanel();
	customerDetailsPanel.setForeground(new Color(0, 0, 0));
	customerDetailsPanel.setBackground(new Color(0, 102, 102));
	customerDetailsPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Customer Details", TitledBorder.LEADING, TitledBorder.TOP, null, Color.LIGHT_GRAY));
	customerDetailsPanel.setBounds(20, 10, 540, 130);
	getContentPane().add(customerDetailsPanel);
	customerDetailsPanel.setLayout(null);
	
	JLabel lblCustomerName = new JLabel("Customer Name");
	lblCustomerName.setForeground(Color.WHITE);
	lblCustomerName.setBounds(10, 20, 120, 20);
	customerDetailsPanel.add(lblCustomerName);
	
	customerNameText = new JTextField();
	customerNameText.setBounds(200, 20, 300, 20);
	customerDetailsPanel.add(customerNameText);
	customerNameText.setColumns(10);
	
	JLabel lblEmail = new JLabel("Email");
	lblEmail.setForeground(Color.WHITE);
	lblEmail.setBounds(10, 45, 150, 20);
	customerDetailsPanel.add(lblEmail);
	
	correspondedAddressText = new JTextField();
	correspondedAddressText.setBounds(200, 45, 300, 20);
	customerDetailsPanel.add(correspondedAddressText);
	correspondedAddressText.setColumns(10);
	
	JLabel lblConatctNumber = new JLabel("Contact Number");
	lblConatctNumber.setForeground(Color.WHITE);
	lblConatctNumber.setBounds(10, 70, 120, 20);
	customerDetailsPanel.add(lblConatctNumber);
	
	mobileNumberText = new JTextField();
	mobileNumberText.setBounds(200, 70, 300, 20);
	customerDetailsPanel.add(mobileNumberText);
	mobileNumberText.setColumns(10);
	
	JLabel lblAccountNumber = new JLabel("Account Number");
	lblAccountNumber.setForeground(Color.WHITE);
	lblAccountNumber.setBounds(10, 95, 120, 20);
	customerDetailsPanel.add(lblAccountNumber);
	
	accountNumberText = new JTextField();
	accountNumberText.setEditable(false);
	accountNumberText.setBounds(200, 95, 300, 20);
	customerDetailsPanel.add(accountNumberText);
	accountNumberText.setColumns(10);
	
	JPanel lockerDetailsPanel = new JPanel();
	lockerDetailsPanel.setForeground(new Color(0, 0, 0));
	lockerDetailsPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Locker Details", TitledBorder.LEADING, TitledBorder.TOP, null, Color.LIGHT_GRAY));
	lockerDetailsPanel.setBackground(new Color(0, 102, 102));
	lockerDetailsPanel.setBounds(20, 150, 540, 105);
	getContentPane().add(lockerDetailsPanel);
	lockerDetailsPanel.setLayout(null);
	
	JLabel lblNewLabel = new JLabel("Locker Number");
	lblNewLabel.setForeground(Color.WHITE);
	lblNewLabel.setBounds(10, 45, 150, 20);
	lockerDetailsPanel.add(lblNewLabel);
	
	lockerNumberText = new JTextField();
	lockerNumberText.setEditable(false);
	lockerNumberText.setBounds(200, 45, 90, 20);
	lockerDetailsPanel.add(lockerNumberText);
	lockerNumberText.setColumns(10);
	
	JLabel lblNewLabel_1 = new JLabel("Locker Key");
	lblNewLabel_1.setForeground(Color.WHITE);
	lblNewLabel_1.setBounds(300, 20, 80, 20);
	lockerDetailsPanel.add(lblNewLabel_1);
	
	lockerKeyText = new JTextField();
	lockerKeyText.setEditable(false);
	lockerKeyText.setBounds(400, 20, 100, 20);
	lockerDetailsPanel.add(lockerKeyText);
	lockerKeyText.setColumns(10);
	//if user then textfield replace to combobox
	JLabel lblNewLabel_2 = new JLabel("Locker Size");
	lblNewLabel_2.setForeground(Color.WHITE);
	lblNewLabel_2.setBounds(10, 20, 80, 20);
	JComboBox lockerSizeComboBox = new JComboBox();
	lockerSizeComboBox.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			try {
	            JComboBox<String> cb = (JComboBox<String>) e.getSource();
	            String selectedItem = (String) cb.getSelectedItem();
	            System.out.println("Selected item: " + selectedItem);
	            lockerSize=selectedItem;
	            int val=0;
	            if(selectedItem=="Small"){
	            	if(availableLockers.get(0)==3){
	            		 JOptionPane.showMessageDialog(null,"Small Locker Not Available");
	            	}
	            	else{
	            		val=1;
	            		
	            		fetchLockerDetails(val);
	            	}
	            }
	            else if (selectedItem=="Medium"){
	            
	            	if(availableLockers.get(1)==0){
	            		 JOptionPane.showMessageDialog(null,"Medium Locker Not Available");
	            	}
	            	else{
	            		val=2;
	            		fetchLockerDetails(val);
	            	}
	            }
	            else if(selectedItem=="Large"){
	            	
	            	if(availableLockers.get(2)==0){
	            		 JOptionPane.showMessageDialog(null,"Large Locker Not Available");
	            	}
	            	else{
	            		val=3;
	            		fetchLockerDetails(val);
	            	}
	            }
			} catch (Exception e2) {
				// TODO: handle exception
			}
		}
	});
	lockerSizeComboBox.setModel(new DefaultComboBoxModel(new String[] {"Small", "Medium", "Large"}));
	lockerSizeComboBox.setSelectedIndex(-1);
	lockerDetailsPanel.add(lblNewLabel_2);
	
//	operatingInstructionText = new JTextField();
//	JComboBox OperatingInstructionComboBox = new JComboBox();
//	OperatingInstructionComboBox.setModel(new DefaultComboBoxModel(new String[] {"Singly", "Either or Surviver", "Jointly by all of Us","Jointly by two of Us", "Others"}));
//	OperatingInstructionComboBox.setSelectedIndex(-1);

	modeOfOperationComboBox = new JComboBox();
	modeOfOperationComboBox.setModel(new DefaultComboBoxModel(new String[] {"Singly", "Either or Surviver", "Jointly by all of Us", "Jointly by two of Us", "Others"}));
	modeOfOperationComboBox.setSelectedIndex(-1);
	modeOfOperationComboBox.setMaximumRowCount(5);
	
	modeOfOperationText = new JTextField();
	lockerSizeText = new JTextField();
	if (chk==1 | chk==3) {

//		operatingInstructionText.setBounds(200, 70, 300, 20);
//		lockerDetailsPanel.add(operatingInstructionText);
//		operatingInstructionText.setColumns(10);
		

		lockerSizeText.setBounds(200, 20, 90, 20);
		lockerDetailsPanel.add(lockerSizeText);
		lockerSizeText.setColumns(10);
		lockerSizeText.setEditable(false);
		modeOfOperationText.setBounds(200, 70, 300, 20);
		lockerDetailsPanel.add(modeOfOperationText);
		modeOfOperationText.setColumns(10);
	}
	else if(chk==0){
//		OperatingInstructionComboBox.setBounds(200, 67, 300, 22);
//		lockerDetailsPanel.add(OperatingInstructionComboBox);
		lockerSizeComboBox.setBounds(200, 20, 90, 20);
		lockerDetailsPanel.add(lockerSizeComboBox);
		modeOfOperationComboBox.setBounds(200, 70, 300, 20);
		lockerDetailsPanel.add(modeOfOperationComboBox);
//		OperatingInstructionComboBox.addActionListener(new ActionListener() {
//			public void actionPerformed(ActionEvent e) {
//			});
		modeOfOperationComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					
				} catch (Exception e2) {
					// TODO: handle exception
				}
			}
			});
	}
	if(chk==1)
	{
		JButton rejectButton = new JButton("Reject");
	    rejectButton.addActionListener(new ActionListener() {
	    	public void actionPerformed(ActionEvent arg0) {
	    		 JPanel panel = new JPanel();
	    	        JTextArea textArea = new JTextArea(5, 20);
	    	        JScrollPane scrollPane = new JScrollPane(textArea);
	    	        panel.add(scrollPane);
	    	        UIManager.put("OptionPane.background", new ColorUIResource(0, 102, 102));
			        UIManager.put("Panel.background", new ColorUIResource(0, 102, 102));
	    	        Object[] options = { "Reject", "Cancel" };

	    	        // Show the confirm dialog with custom button labels
	    	        int result = JOptionPane.showOptionDialog(null, panel, "Enter Comments", JOptionPane.OK_CANCEL_OPTION,
	    	                JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
	    	        // Check if the user clicked the OK button
	    	        if (result == JOptionPane.OK_OPTION) {
	    	            String comment = textArea.getText();
	    	            try {

							Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
							java.sql.Connection connection = null;
							java.sql.Statement  lcl_stmt =null;
							connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
							
							PreparedStatement statement = connection.prepareStatement("select * from lockerassigned_tr where LOCKERNUM=?");
						
							statement.setString(1,lockerNumber);
							
						
							ResultSet result2 = statement.executeQuery();
							System.out.println("DB successful");
								if (result2.next()) {
									int ASSIGNEDID = result2.getInt("ASSIGNEDID");
					                int VOUCHERID = result2.getInt("VOUCHERID");
					                int CUSTOMERID = result2.getInt("CUSTOMERID");
					                int DEPOSITAMOUNT = result2.getInt("DEPOSITAMOUNT");
					                String OVERDUE = result2.getString("OVERDUE");
					                String LASTRECOVERDATE = result2.getString("LASTRECOVERDATE");
					                int RENTSTATUS = result2.getInt("RENTSTATUS");
					                String ASSIGNEDDATE = result2.getString("ASSIGNEDDATE");
					                String COMMENTS = result2.getString("COMMENTS");
					                int NOTIFYUSER = result2.getInt("NOTIFYUSER");
					                String LOCKERNUM = result2.getString("LOCKERNUM");
					                String insertQuery="";
					                String deleteQuery="DELETE FROM lockerassigned_tr WHERE LOCKERNUM=?";
					                String deleteTl= "DELETE FROM lockerassigned_tl WHERE LOCKERNUM=?";
					                
					                System.out.println("next");
					                //Insert
					                	SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
					                    Date currentDate = new Date(System.currentTimeMillis());
						                ASSIGNEDDATE=formatter.format(currentDate);
						                System.out.println(ASSIGNEDDATE);
						                 insertQuery = "INSERT INTO lockerassigned_tl (ASSIGNEDID, VOUCHERID,CUSTOMERID,DEPOSITAMOUNT," +
						                "OVERDUE,LASTRECOVERDATE,RENTSTATUS,ASSIGNEDDATE,COMMENTS,NOTIFYUSER,LOCKERNUM) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
						                
						                }
						                else if(RENTSTATUS==1)
						                {
						                	  insertQuery = "INSERT INTO lockerassigned_ht (ASSIGNEDID, VOUCHERID,CUSTOMERID,DEPOSITAMOUNT," +
										     "OVERDUE,LASTRECOVERDATE,RENTSTATUS,ASSIGNEDDATE,COMMENTS,NOTIFYUSER,LOCKERNUM) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
										}
					                
					                PreparedStatement insertStatement = connection.prepareStatement(insertQuery);
					                insertStatement.setInt(1, ASSIGNEDID);
					                insertStatement.setInt(2, VOUCHERID);
					                insertStatement.setInt(3, CUSTOMERID);
					                insertStatement.setInt(4, DEPOSITAMOUNT);
					                insertStatement.setString(5, OVERDUE);
					                insertStatement.setString(6, LASTRECOVERDATE);
					                insertStatement.setInt(7, RENTSTATUS);
					                insertStatement.setString(8, ASSIGNEDDATE);
					                insertStatement.setString(9, COMMENTS);
					                insertStatement.setInt(10, NOTIFYUSER);
					                insertStatement.setString(11, LOCKERNUM);
					                // Set other column values as needed

					                int res=insertStatement.executeUpdate();
					                System.out.println("next");
					                System.out.println(res);
					                if(res>0){
					                	
					                	System.out.println("new");
					                	System.out.println(res);

					                	if(RENTSTATUS==1)
					                	{
					                		PreparedStatement delete = connection.prepareStatement(deleteTl);
					                		delete.setString(1, lockerNumber);
					                		delete.execute();
					                	}
	            		                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
	            		                deleteStatement.setString(1, lockerNumber);
	            		                deleteStatement.execute();
					                	System.out.println("delete");
					                	
					                }
					                
					                result.close();
					                statement.close();
					                connection.close();
					       
					                System.out.println("Row inserted successfully!");
					                JOptionPane.showMessageDialog(null, "Authorize");
					                
								}
					
							if (rowsUpdated!=0) {
								UIManager.put("OptionPane.background", new ColorUIResource(255, 255, 255));
								UIManager.put("Panel.background", new ColorUIResource(255, 255, 255));
					            JOptionPane.showMessageDialog(null, "<html>Your Comment:<br>" + comment + "<br>send to User</html>");
							}
						} catch (Exception e) {
							// TODO: handle exception
							System.out.print(e.getMessage());
						}
	    	            newMainMenu obj = new newMainMenu(1);
	    		    	obj.setSize(600, 500);
	    		    	obj.setVisible(true);
	    		    	dispose();
	    	        } else if (result == JOptionPane.CANCEL_OPTION) {
	    	            // Close the JOptionPane
	    	            System.exit(0);
	    	        }
	    	}
	    });
	    rejectButton.setBounds(20, 410, 90, 30);
	    getContentPane().add(rejectButton);
	    
	    JButton referBackButton = new JButton("Refer Back");
	    referBackButton.addActionListener(new ActionListener() {
	    	public void actionPerformed(ActionEvent arg0) {
	   		 JPanel panel = new JPanel();
		        JTextArea textArea = new JTextArea(5, 20);
		        JScrollPane scrollPane = new JScrollPane(textArea);
		        panel.add(scrollPane);
		        UIManager.put("OptionPane.background", new ColorUIResource(0, 102, 102));
		        UIManager.put("Panel.background", new ColorUIResource(0, 102, 102));
		        // Set the background color of the pop-up box
		        Object[] options = { "Refer Back", "Cancel" };

		        // Show the confirm dialog with custom button labels
		        int result = JOptionPane.showOptionDialog(null, panel, "Enter Comments", JOptionPane.OK_CANCEL_OPTION,
		                JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
		        
		        // Check if the user clicked the OK button
		        if (result == JOptionPane.OK_OPTION) {
			            String comment = textArea.getText();

				            try {
				            	Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
								java.sql.Connection connection = null;
								java.sql.Statement  lcl_stmt =null;
								connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
								
								PreparedStatement statement = connection.prepareStatement("UPDATE lockerassigned_tr SET COMMENTS = ?, NOTIFYUSER = ? WHERE LOCKERNUM = ? ;");				
								statement.setString(1,comment);
								statement.setInt(2,1);
								statement.setString(3,lockerNumber);
								
								int rowsUpdated = statement.executeUpdate();
								System.out.print(comment);
								if (rowsUpdated!=0) {
									UIManager.put("OptionPane.background", new ColorUIResource(255, 255, 255));
									UIManager.put("Panel.background", new ColorUIResource(255, 255, 255));
						            JOptionPane.showMessageDialog(null, "<html>Your Comment:<br>" + comment + "<br>send to User</html>");
								}
							} catch (Exception e) {
								// TODO: handle exception
								System.out.print(e.getMessage());
							}
			            newMainMenu obj = new newMainMenu(1);
				    	obj.setSize(600, 500);
				    	obj.setVisible(true);
				    	dispose();
		        } else if (result == JOptionPane.CANCEL_OPTION) {
		            // Close the JOptionPane
		            System.exit(0);
		        }
		}
	    });
	    referBackButton.setBounds(120, 410, 100, 30);
	    getContentPane().add(referBackButton);

	}
	
	JLabel lblLockerStatus = new JLabel("Rent Status");
	lblLockerStatus.setForeground(Color.WHITE);
	lblLockerStatus.setBounds(300, 45, 80, 20);
	lockerDetailsPanel.add(lblLockerStatus);
	
	rentStatusText = new JTextField();
	rentStatusText.setEditable(false);
	rentStatusText.setBounds(400, 45, 100, 20);
	lockerDetailsPanel.add(rentStatusText);
	rentStatusText.setColumns(10);
	
	JLabel lblNewLabel_9 = new JLabel("Mode Of Operation");
	lblNewLabel_9.setForeground(Color.WHITE);
	lblNewLabel_9.setBounds(10, 70, 120, 20);
	lockerDetailsPanel.add(lblNewLabel_9);
	
	DepositDetailsPanel.setForeground(new Color(0, 0, 0));
	DepositDetailsPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Rent & Security Deposit Details", TitledBorder.LEADING, TitledBorder.TOP, null, Color.LIGHT_GRAY));
	DepositDetailsPanel.setBackground(new Color(0, 102, 102));
	DepositDetailsPanel.setBounds(20, 265, 540, 100);
	// DepositDetailsPanel.setBounds(20, 290, 540, 125);
	getContentPane().add(DepositDetailsPanel);
	DepositDetailsPanel.setLayout(null);
	final JLabel lbldateFormat = new JLabel("Date format: dd/MM/yyyy");
	JLabel lblNewLabel_4 = new JLabel("Mode Of Payment");
	lblNewLabel_4.setForeground(Color.WHITE);
	lblNewLabel_4.setBounds(10, 20, 120, 20);
	DepositDetailsPanel.add(lblNewLabel_4);

	lblExpiryDate.setForeground(Color.WHITE);
	depositText = new JTextField();
	depositText.setBounds(200, 45, 90, 20);
	DepositDetailsPanel.add(depositText);
	depositText.setColumns(10);
	
	JLabel lblNewLabel_6 = new JLabel("Overdue Date");
	lblNewLabel_6.setForeground(Color.WHITE);
	lblNewLabel_6.setBounds(300, 45, 80, 20);
	DepositDetailsPanel.add(lblNewLabel_6);
	
	overdueDateText = new JTextField();
	overdueDateText.setBounds(400, 45, 100, 20);
	DepositDetailsPanel.add(overdueDateText);
	overdueDateText.setColumns(10);
	
	JLabel lblNewLabel_7 = new JLabel("Last Rent Recover Date");
	lblNewLabel_7.setForeground(Color.WHITE);
	lblNewLabel_7.setBounds(10, 70, 150, 20);
	DepositDetailsPanel.add(lblNewLabel_7);
	
	recoverDateText = new JTextField();
	recoverDateText.setBounds(200, 70, 90, 20);
	DepositDetailsPanel.add(recoverDateText);
	recoverDateText.setColumns(10);
	
	////

	//Mode of Payment
	if(chk==0 | chk==2)
	{
				JComboBox modeOfPaymentComboBox = new JComboBox();
				modeOfPaymentComboBox.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								try {
									
					            JComboBox<String> cb = (JComboBox<String>) e.getSource();
					            String selectedItem = (String) cb.getSelectedItem();
					            System.out.println("Selected item: " + selectedItem);
					            paymentMode=selectedItem;
					            
					            int val=0;
					            if(selectedItem=="Complementary"){
					            	// Set the new bounds here
					            		DepositDetailsPanel.setBounds(20, 265, 540, 125);
					            		lblExpiryDate.setBounds(10, 95, 150, 20);
					            		lblExpiryDate.setForeground(Color.WHITE);
					            		DepositDetailsPanel.add(lblExpiryDate);
					                   	lblExpiryDate.setVisible(true);
					            		expiryDateText = new JTextField();
					            		expiryDateText.setBounds(200, 95, 90, 20);
					                    expiryDateText.setVisible(true);
					            		DepositDetailsPanel.add(expiryDateText);
					            		expiryDateText.setColumns(10);
					            		
//					            		lbldateFormat = new JLabel()
					            		lbldateFormat.setBounds(300, 95, 150, 20);
					            		lbldateFormat.setForeground(new Color(0, 0, 0));					            		
					            		DepositDetailsPanel.add(lbldateFormat);
					            		lbldateFormat.setForeground(Color.WHITE);
					            		lbldateFormat.setVisible(true);
					            		lbldateFormat.setEnabled(false);
					            		
					            		expiryDateText.addFocusListener(new FocusAdapter() {
					            			@Override
					            			public void focusLost(FocusEvent e) {
					            				
					            				
					            				///
					            				String text=expiryDateText.getText();
					            				System.out.print(text);
					            				boolean ans=formatDate(text);
					            				if(!ans){
					            					JOptionPane.showMessageDialog(null,"Invalid Date");
					            				}
					            				
					            			}
					            		});
					                 // Repaint the panel to reflect changes
						                 DepositDetailsPanel.revalidate();
						                 DepositDetailsPanel.repaint();
					            	
					            }
					            else if (selectedItem=="Security Deposit" || selectedItem=="Yearly Rent"){
					            	DepositDetailsPanel.setBounds(20, 265, 540, 100);
					            	DepositDetailsPanel.revalidate();
					                DepositDetailsPanel.repaint();
					                expiryDateText.setVisible(false);
					            	lblExpiryDate.setVisible(false);
					            	lbldateFormat.setVisible(false);
					            	
					            }
								} catch (Exception e2) {
									// TODO: handle exception
								}
							}
							});

					modeOfPaymentComboBox.setMaximumRowCount(3);
					modeOfPaymentComboBox.setModel(new DefaultComboBoxModel(new String[] {"Complementary", "Security Deposit", "Yearly Rent"}));
					modeOfPaymentComboBox.setSelectedIndex(-1);
					modeOfPaymentComboBox.setBounds(200, 20, 300, 20);
					DepositDetailsPanel.add(modeOfPaymentComboBox);
				}
				else if(chk==1 | chk==3)
				{
					modeOfPaymentText = new JTextField();
					modeOfPaymentText.setBounds(200, 20, 300, 20);
					DepositDetailsPanel.add(modeOfPaymentText);
					modeOfPaymentText.setColumns(10);	
					customerNameText.setEditable(false);
					correspondedAddressText.setEditable(false);
					mobileNumberText.setEditable(false);
					accountNumberText.setEditable(false);
					lockerSizeText.setEditable(false);
					lockerKeyText.setEditable(false);
					lockerNumberText.setEditable(false);
					rentStatusText.setEditable(false);
//					operatingInstructionText.setEditable(false);
					modeOfOperationText.setEditable(false);
					modeOfPaymentText.setEditable(false);
					depositText.setEditable(false);
					overdueDateText.setEditable(false);
					recoverDateText.setEditable(false);

				}
				if(chk==2)
				{
					lockerSizeText.setBounds(200, 20, 90, 20);
					lockerDetailsPanel.add(lockerSizeText);
					lockerSizeText.setColumns(10);
					lockerSizeText.setEnabled(false);

//					operatingInstructionText.setEditable(true);
					depositText.setEditable(true);
					overdueDateText.setEditable(true);
					recoverDateText.setEditable(true);
					modeOfOperationComboBox.setBounds(200, 70, 300, 20);
					lockerDetailsPanel.add(modeOfOperationComboBox);
//					OperatingInstructionComboBox.addActionListener(new ActionListener() {
//						public void actionPerformed(ActionEvent e) {
//						});
					modeOfOperationComboBox.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) {
					
						}
						});
				}
	JLabel lblNewLabel_5 = new JLabel("Rent/Security Deposit");
	lblNewLabel_5.setForeground(Color.WHITE);
	lblNewLabel_5.setBounds(10, 45, 150, 20);
	DepositDetailsPanel.add(lblNewLabel_5);
	
	
	JButton backButton = new JButton("Back");
	backButton.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			if (chk==0) {
				newLockerIssuance obj=new newLockerIssuance(0);
				obj.setVisible(true);
				obj.setSize(600, 500);
				dispose();
			}else if(chk==1){
				newGrid obj=new newGrid(1);
				obj.setVisible(true);
				obj.setSize(600, 500);
				dispose();
			}
			else if(chk==2){
				newLockerMaintenance obj=new newLockerMaintenance(2);
				obj.setVisible(true);
				obj.setSize(600, 500);
				dispose();
			}
			else if(chk==3){
				newLockerMaintenance obj=new newLockerMaintenance(3);
				obj.setVisible(true);
				obj.setSize(600, 500);
				dispose();
			}
			
			
		}
	});
	backButton.setBounds(370, 410, 90, 30);
	getContentPane().add(backButton);
	
	JButton signOffButton = new JButton("Sign Off");
	signOffButton.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent arg0) {
			newLogIn obj=new newLogIn();
			obj.setVisible(true);
			obj.setSize(600, 500);
			dispose();
		}
	});
	signOffButton.setBounds(470, 410, 90, 30);
	getContentPane().add(signOffButton);
//date
	newMainMenu date = new newMainMenu(1);
    JLabel dateLabel = new JLabel(date.getCurrentDate());
    dateLabel.setForeground(Color.WHITE);
    dateLabel.setHorizontalAlignment(SwingConstants.LEFT);
    dateLabel.setVerticalAlignment(SwingConstants.BOTTOM);
    dateLabel.setBounds(10, 440, 570, 20);
    getContentPane().add(dateLabel);
    
    JButton saveButton = new JButton(chk==1 ? "Authorize" : chk==2 ? "Update": chk==3 ? "Surrender": "Save");
    saveButton.addActionListener(new ActionListener() {
    	public void actionPerformed(ActionEvent arg0) {
    		if(chk==0)
    		{
    			//user query 
    			
	            JOptionPane.showMessageDialog(null, "Save");
    		}else if(chk==1){
				//authorizer
    			try {
						Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
						java.sql.Connection connection = null;
						java.sql.Statement  lcl_stmt =null;
						connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
						
						PreparedStatement statement = connection.prepareStatement("select * from lockerassigned_tr where LOCKERNUM=?");
					
						statement.setString(1,lockerNumber);
						
					
						ResultSet result = statement.executeQuery();
						System.out.println("DB successful");
							if (result.next()) {
								int ASSIGNEDID = result.getInt("ASSIGNEDID");
				                int VOUCHERID = result.getInt("VOUCHERID");
				                int CUSTOMERID = result.getInt("CUSTOMERID");
				                int DEPOSITAMOUNT = result.getInt("DEPOSITAMOUNT");
				                String OVERDUE = result.getString("OVERDUE");
				                String LASTRECOVERDATE = result.getString("LASTRECOVERDATE");
				                int RENTSTATUS = result.getInt("RENTSTATUS");
				                String ASSIGNEDDATE = result.getString("ASSIGNEDDATE");
				                String COMMENTS = result.getString("COMMENTS");
				                int NOTIFYUSER = result.getInt("NOTIFYUSER");
				                String LOCKERNUM = result.getString("LOCKERNUM");
				                String insertQuery="";
				                String deleteQuery="DELETE FROM lockerassigned_tr WHERE LOCKERNUM=?";
				                String deleteTl= "DELETE FROM lockerassigned_tl WHERE LOCKERNUM=?";
				                
				                System.out.println("next");
				                //Insert
				                if(RENTSTATUS==0)
				                {
				                	SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
				                    Date currentDate = new Date(System.currentTimeMillis());
					                ASSIGNEDDATE=formatter.format(currentDate);
					                System.out.println(ASSIGNEDDATE);
					                 insertQuery = "INSERT INTO lockerassigned_tl (ASSIGNEDID, VOUCHERID,CUSTOMERID,DEPOSITAMOUNT," +
					                "OVERDUE,LASTRECOVERDATE,RENTSTATUS,ASSIGNEDDATE,COMMENTS,NOTIFYUSER,LOCKERNUM) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
					                
					                }
					                else if(RENTSTATUS==1)
					                {
					                	  insertQuery = "INSERT INTO lockerassigned_ht (ASSIGNEDID, VOUCHERID,CUSTOMERID,DEPOSITAMOUNT," +
									     "OVERDUE,LASTRECOVERDATE,RENTSTATUS,ASSIGNEDDATE,COMMENTS,NOTIFYUSER,LOCKERNUM) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
									}
				                
				                PreparedStatement insertStatement = connection.prepareStatement(insertQuery);
				                insertStatement.setInt(1, ASSIGNEDID);
				                insertStatement.setInt(2, VOUCHERID);
				                insertStatement.setInt(3, CUSTOMERID);
				                insertStatement.setInt(4, DEPOSITAMOUNT);
				                insertStatement.setString(5, OVERDUE);
				                insertStatement.setString(6, LASTRECOVERDATE);
				                insertStatement.setInt(7, RENTSTATUS);
				                insertStatement.setString(8, ASSIGNEDDATE);
				                insertStatement.setString(9, COMMENTS);
				                insertStatement.setInt(10, NOTIFYUSER);
				                insertStatement.setString(11, LOCKERNUM);
				                // Set other column values as needed

				                int res=insertStatement.executeUpdate();
				                System.out.println("next");
				                System.out.println(res);
				                if(res>0){
				                	
				                	System.out.println("new");
				                	System.out.println(res);

				                	if(RENTSTATUS==1)
				                	{
				                		PreparedStatement delete = connection.prepareStatement(deleteTl);
				                		delete.setString(1, lockerNumber);
				                		delete.execute();
				                	}
            		                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
            		                deleteStatement.setString(1, lockerNumber);
            		                deleteStatement.execute();
				                	System.out.println("delete");
				                	
				                }
				                
				                result.close();
				                statement.close();
				                connection.close();
				       
				                System.out.println("Row inserted successfully!");
				                JOptionPane.showMessageDialog(null, "Authorize");
				                
							}
				} catch (Exception e) {
					// TODO: handle exception
					System.out.println(e.getMessage());
//					e.printStackTrace();
				}
//    			try {
//					Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
//					java.sql.Connection connection = null;
//					java.sql.Statement  lcl_stmt =null;
//					connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
//					String deleteQuery = "DELETE FROM lockerassigned_tr WHERE LOCKERNUM=?";
//
//	                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
//	                deleteStatement.executeUpdate();
//	                deleteStatement.close();
//	                connection.close();
//					
//				} catch (Exception e) {
//					// TODO: handle exception
//					System.out.println("connection fail! FOR DELETE QUERY");
//				}
			}else if(chk==2){
				//authorizer
    			
	            JOptionPane.showMessageDialog(null, "Maintenance");
			}else if(chk==3){
				//authorizer
    			
	            JOptionPane.showMessageDialog(null, "Surrender");
			}
    	}
    });
    saveButton.setBounds(260, 410, 100, 30);
    getContentPane().add(saveButton);
    
    }
	
	// functions declarations
	public boolean formatDate(String inp){
		Scanner scanner = new Scanner(System.in);
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        sdf.setLenient(false); // Set lenient property to false
        try {
            java.util.Date date = sdf.parse(inp);
            int month = date.getMonth() + 1; // Extract month value
            if (month > 12) {
            	JOptionPane.showMessageDialog(null,"Invalid Month");
                System.out.println("Invalid month. Please enter a month between 1 and 12.");
                return false;
            }
            System.out.println("The date you entered is: "+ sdf.format(date));
  //          System.out.println("The date you entered is: " +  new Date());
            Date currentDate = new Date();
            return !date.before(currentDate);
        } catch (ParseException e) {
            System.out.println("Invalid date format. Please try again.");
            return false;
        }
	}
	
	
	public static boolean validateDate(String dateString) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        dateFormat.setLenient(false); // Disallow lenient parsing

        try {
            Date date = dateFormat.parse(dateString);
            Date currentDate = new Date(); // Get the current date
//            System.out.println(date);
//            System.out.println(currentDate);
            System.out.println("The date you entered is: " + date.getDate()+"  "+ date.getMonth()+ "  "+date.getYear());
            return !date.before(currentDate); // Check if the date is not before the current date
        } catch (ParseException e) {
        	System.out.println(e.getMessage());
            return false; // Invalid date format
        }
    }
	
	
	
	public void insertData(HashMap<String,String> custAccRelation ){
		
//		this.accountNum=custAccRelation.get("accountnum");
//		this.branchcodeid=custAccRelation.get("branchcodeid");
//		customerNameText.setText(custAccRelation.get("customername"));
//		contactInformationText.setText(custAccRelation.get("contactno"));
//		emailText.setText(custAccRelation.get("email"));
//		customerNameText.setEditable(false);
//		contactInformationText.setEditable(false);
//		emailText.setEditable(false);
//		titleOfAccountText.setText(custAccRelation.get("accounttitle"));
//		operatingInstructionText.setText(custAccRelation.get("operatinginstruction"));
////		openInBranchText.setText(custAccRelation.get("branchcode"));
//		titleOfAccountText.setEditable(false);
//		operatingInstructionText.setEditable(false);
////		openInBranchText.setEditable(false);
	}
//	
//	
//	
//	public void insertArray(ArrayList<Integer> arr){
//		availableLockers=arr;
//	}
	
	
	
	public void fetchLockerDetails(int val){
		try{
			lockerSizeId=val;
			Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
			java.sql.Connection connection = null;
			java.sql.Statement  lcl_stmt =null;
			connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
						
			String query="select l.lockersizeid,l.lockersize,c.charges, s.secdeposit from lockersize l,lockercharges c,lockersecuritydeposit s where l.lockerchargesid=c.lockerchargesid and l.secdepositid=s.secdepositid and l.lockersizeid=?;";
			PreparedStatement statement = connection.prepareStatement(query);
			
			statement.setInt(1, val);
			
			ResultSet result = statement.executeQuery();
			
			if (result.next()) {
//			    String secDeposit = result.getString("SECDEPOSIT");
//			    Integer charges= result.getInt("CHARGES");
//			    
//			   securityDepositText.setEnabled(true);
//			   yearlyRentText.setEnabled(true);
//			   
//			   securityDepositText.setText(secDeposit);
//			   yearlyRentText.setText(Integer.toString(charges));
//			    		
//			     	 
//			   securityDepositLabel.setEnabled(true);
//			   yearlyRentLabel.setEnabled(true);
//			    
//			   
			}
			
		}
		catch(Exception e){
			System.out.println(e.getMessage());
			 JOptionPane.showMessageDialog(null,"DB Connection Failed");
		}
	
	}

	// customer Details fetching function
	public void getCustDetails(String lockerNumber){
			
			try{
				
				Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
				java.sql.Connection connection = null;
				java.sql.Statement  lcl_stmt =null;
				connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
							
				String query="select c.customerid,c.customername,c.email, c.contactno  from Accountnew a, customerAccountRelationship r, customer c where a.accountNum=r.accountNum and r.customerId=c.customerid and a.accountNum=?;";
				PreparedStatement statement = connection.prepareStatement(query);
				
				statement.setString(1, lockerNumber);
				
				ResultSet result = statement.executeQuery();
				
				String queryAccount="select  a.accountNum,a.accounttitle, a.branchCode, o.operatinginstruction from accountnew a,operatinginstruction o where a.operatinginstructionid=o.operatinginstructionid  and accountnum=?;";
				PreparedStatement statementAccount = connection.prepareStatement(queryAccount);
				
				statementAccount.setString(1, lockerNumber);
				
				ResultSet resultAccount = statementAccount.executeQuery();
				
				HashMap<String, String> customerAccountRelationship = new HashMap<String, String>();
				if(resultAccount.next()){
					customerAccountRelationship.put("accounttitle",resultAccount.getString("ACCOUNTTITLE")) ;
					Global.accountNum(resultAccount.getString("ACCOUNTNUM"));
					int branchCode=resultAccount.getInt("BRANCHCODE");
					if(branchCode==1001){
						customerAccountRelationship.put("branchcode","No - Digital Account") ;
					}
					else{
						customerAccountRelationship.put("branchcode","Yes - "+ Integer.toString(resultAccount.getInt("BRANCHCODE"))) ;
					}
					customerAccountRelationship.put("branchcodeid",Integer.toString(resultAccount.getInt("BRANCHCODE"))) ;
					customerAccountRelationship.put("operatinginstruction", resultAccount.getString("OPERATINGINSTRUCTION")) ;
					customerAccountRelationship.put("accountnum", resultAccount.getString("ACCOUNTNUM")) ;
	
				}
				
				
				
				if (result.next()) {
					customerAccountRelationship.put("customername",result.getString("CUSTOMERNAME")) ;
					customerAccountRelationship.put("contactno",result.getString("CONTACTNO")) ;
					customerAccountRelationship.put("email", result.getString("EMAIL")) ;
					Global.customerId= result.getInt("customerid");
				    customerDetails obj= new customerDetails(0);
				    	obj.insertData(customerAccountRelationship);
				    	obj.insertArray(availableLockers);
						obj.setVisible(true);
						obj.setSize(600,500);
						dispose();
				  
				   
				}
				else{
					 JOptionPane.showMessageDialog(null,"Customer Details Not Found");
				}
			}
			catch(Exception e){
				JOptionPane.showMessageDialog(null,"Could not connect to DB");
				System.out.println(e);
			}
			
			
			
	}
	public void fetchDetails()
	{
		try {
		Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
		java.sql.Connection connection = null;
		java.sql.Statement  lcl_stmt =null;
		connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
		
		PreparedStatement statement = connection.prepareStatement("select temp.customername,temp.email, temp.contactno,temp.accountNum,temp.lockerno,temp.lockersizeid,temp.keynum, temp.rentstatus,temp.depositamount,temp.overdue, temp.lastrecoverdate, p.modeofpayment,p.expiry_date, o.modeofoperation from modeofpayment p,("
				+ "select *,tr.lockernum as lockerno  from lockerAssigned_tr tr, locker l,customer c, voucher_master_tl v where tr.lockernum=l.lockernum and tr.voucherid=v.voucherid and tr.customerid=c.customerid and tr.lockernum=?) temp"
				+ ", modeofoperation o where temp.modeofoperationid=o.modeofoperationid and temp.modeofpaymentid=p.modeofpaymentid;");
	
		statement.setString(1,lockerNumber);
		ResultSet result = statement.executeQuery();
		System.out.println("After Execution");
		
		if (result.next()) {
//			System.out.println(result.getString("AUTH"));
//			Global.userId=result.getInt("USERID");
			customerNameText.setText(result.getString("CUSTOMERNAME"));
			correspondedAddressText.setText(result.getString("EMAIL"));
			mobileNumberText.setText(result.getString("CONTACTNO"));
			
			accountNumberText.setText(result.getString("ACCOUNTNUM"));
			
			lockerSizeText.setText(lockerSizeName.get(result.getInt("LOCKERSIZEID")));
			
			lockerKeyText.setText(result.getString("KEYNUM"));
			
			rentStatusText.setText(rentStatus.get(result.getInt("RENTSTATUS")));
			lockerNumberText.setText(result.getString("LOCKERNO"));
			
			modeOfOperationText.setText(result.getString("MODEOFOPERATION"));
			
			modeOfPaymentText.setText(result.getString("MODEOFPAYMENT"));
//			depositText.setText(result.getString("DEPOSITAMOUNT"));
			
			overdueDateText.setText(result.getString("OVERDUE"));
			depositText.setText(Integer.toString(result.getInt("DEPOSITAMOUNT")));
			recoverDateText.setText(result.getString("LASTRECOVERDATE"));
			
			if(result.getString("MODEOFOPERATION").equals("Complementary")) {
//				expiryTextField = new JTextField();
//				expiryTextField.setBounds(400, 70, 100, 20);
//				DepositDetailsPanel.add(expiryTextField);
//				expiryTextField.setColumns(10);
//				expiryTextField.setText(result.getString("EXPIRY_DATE"));
//				expiryTextField.setEditable(false);
//				
//				JLabel lblNewLabel_3 = new JLabel("Expiry");
//				lblNewLabel_3.setForeground(new Color(255, 255, 255));
//				lblNewLabel_3.setBounds(300, 73, 56, 14);
//				DepositDetailsPanel.add(lblNewLabel_3);
				
				
				
				DepositDetailsPanel.setBounds(210, 265, 540, 125);
        		lblExpiryDate.setBounds(10, 95, 150, 20);
        		lblExpiryDate.setForeground(Color.WHITE);
        		DepositDetailsPanel.add(lblExpiryDate);
               	lblExpiryDate.setVisible(true);
        		expiryDateText = new JTextField();
        		expiryDateText.setBounds(200, 95, 90, 20);
                expiryDateText.setVisible(true);
        		DepositDetailsPanel.add(expiryDateText);
        		expiryDateText.setColumns(10);
        		
        		
        		
				
				
//        		DepositDetailsPanel.add(expiryTextField);
//        		
//        		DepositDetailsPanel.setForeground(new Color(0, 0, 0));
//        		DepositDetailsPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Rent & Security Deposit Details", TitledBorder.LEADING, TitledBorder.TOP, null, Color.LIGHT_GRAY));
//        		DepositDetailsPanel.setBackground(new Color(0, 102, 102));
//        		DepositDetailsPanel.setBounds(20, 265, 540, 100);
//        		 DepositDetailsPanel.revalidate();
//                 DepositDetailsPanel.repaint();
                 
			}
		
		}
		else
		{
			JOptionPane.showMessageDialog(null,"Locker Number Not Found");
		}
		
	} catch (Exception e) {
		System.out.println(e.getMessage());
		// TODO: handle exception
		System.out.println("DB Connection fail");
		JOptionPane.showMessageDialog(null,"DB Connection Failed");
	}
	}
	 public static void main(String[] args) {
		 newDetails frame = new newDetails(1,"A120");
	    	frame.setSize(600, 500);
	    	frame.setVisible(true);
	    	
	    }
}


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationStatement(ASTConverter.java:3030)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleLocalDeclaration(ASTConverter.java:400)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:532)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:135)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:114)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.jdt.ui 4 2 2023-12-28 12:24:39.527
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationStatement(ASTConverter.java:3030)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleLocalDeclaration(ASTConverter.java:400)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:532)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:135)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:114)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.jdt.ui 4 0 2023-12-28 12:24:39.527
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationStatement(ASTConverter.java:3030)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleLocalDeclaration(ASTConverter.java:400)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:532)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:135)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:114)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.jdt.core 4 4 2023-12-28 12:24:41.839
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package LockerManagement;
import javax.swing.JFrame;
import java.awt.Color;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.UIManager;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Point;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Scanner;
import java.awt.Font;
import javax.swing.JInternalFrame;
import javax.swing.plaf.ColorUIResource;
import javax.swing.text.DateFormatter;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.BorderLayout;
import javax.swing.JLayeredPane;
import java.awt.GridLayout;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import java.awt.Panel;
import javax.swing.border.TitledBorder;
import java.awt.Component;
import java.awt.Dimension;
import javax.swing.border.EtchedBorder;
public class newDetails extends JFrame {

	public int chk;
	public String lockerNumber;
	public Integer lockerSizeId;
	private JTextField customerNameText;
	private JTextField correspondedAddressText;
	private JTextField mobileNumberText;
	private JTextField accountNumberText;
	private JTextField lockerNumberText;
	private JTextField lockerKeyText;
	private JTextField lockerSizeText;
	private JTextField rentStatusText;
//	private JTextField operatingInstructionText;
	private JTextField depositText;
	private JTextField overdueDateText;
	private JTextField recoverDateText;
	private JTextField modeOfOperationText;
	private JComboBox modeOfOperationComboBox;
	ArrayList<Integer> availableLockers;
	public String lockerSize;
	public String paymentMode;
	private JTextField expiryDateText;
	private JTextField modeOfPaymentText;
	final JPanel DepositDetailsPanel = new JPanel();
	final JLabel lblExpiryDate = new JLabel("Expiry Date");
	HashMap<Integer, String> lockerSizeName = new HashMap<>();
	HashMap<Integer, String> rentStatus = new HashMap<>();
	//Constructor
	/**
	 * @wbp.parser.constructor
	 */
	public newDetails(final int chk)
	{
		this.chk=chk;
		customerPanel();

	}
	public newDetails(final int chk, String lockerNumber)
	{
		  // Set names using put method
        lockerSizeName.put(1, "Small");
        lockerSizeName.put(2, "Medium");
        lockerSizeName.put(3, "Large");
        rentStatus.put(0,"Assign");
        rentStatus.put(1,"Surrender");
		this.lockerNumber=lockerNumber;
		this.chk=chk;
		if (chk==1) {
			customerPanel();
			fetchDetails();
		}
//		System.out.println(lockerSizeText);

	}
public void customerPanel()
{
	getContentPane().setBackground(new Color(0, 102, 102));
	getContentPane().setLayout(null);
	setSize(new Dimension(600, 500));
	setResizable(false);
	setLocation(new Point(500, 200));
	setTitle("Customer Details");
	JPanel customerDetailsPanel = new JPanel();
	customerDetailsPanel.setForeground(new Color(0, 0, 0));
	customerDetailsPanel.setBackground(new Color(0, 102, 102));
	customerDetailsPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Customer Details", TitledBorder.LEADING, TitledBorder.TOP, null, Color.LIGHT_GRAY));
	customerDetailsPanel.setBounds(20, 10, 540, 130);
	getContentPane().add(customerDetailsPanel);
	customerDetailsPanel.setLayout(null);
	
	JLabel lblCustomerName = new JLabel("Customer Name");
	lblCustomerName.setForeground(Color.WHITE);
	lblCustomerName.setBounds(10, 20, 120, 20);
	customerDetailsPanel.add(lblCustomerName);
	
	customerNameText = new JTextField();
	customerNameText.setBounds(200, 20, 300, 20);
	customerDetailsPanel.add(customerNameText);
	customerNameText.setColumns(10);
	
	JLabel lblEmail = new JLabel("Email");
	lblEmail.setForeground(Color.WHITE);
	lblEmail.setBounds(10, 45, 150, 20);
	customerDetailsPanel.add(lblEmail);
	
	correspondedAddressText = new JTextField();
	correspondedAddressText.setBounds(200, 45, 300, 20);
	customerDetailsPanel.add(correspondedAddressText);
	correspondedAddressText.setColumns(10);
	
	JLabel lblConatctNumber = new JLabel("Contact Number");
	lblConatctNumber.setForeground(Color.WHITE);
	lblConatctNumber.setBounds(10, 70, 120, 20);
	customerDetailsPanel.add(lblConatctNumber);
	
	mobileNumberText = new JTextField();
	mobileNumberText.setBounds(200, 70, 300, 20);
	customerDetailsPanel.add(mobileNumberText);
	mobileNumberText.setColumns(10);
	
	JLabel lblAccountNumber = new JLabel("Account Number");
	lblAccountNumber.setForeground(Color.WHITE);
	lblAccountNumber.setBounds(10, 95, 120, 20);
	customerDetailsPanel.add(lblAccountNumber);
	
	accountNumberText = new JTextField();
	accountNumberText.setEditable(false);
	accountNumberText.setBounds(200, 95, 300, 20);
	customerDetailsPanel.add(accountNumberText);
	accountNumberText.setColumns(10);
	
	JPanel lockerDetailsPanel = new JPanel();
	lockerDetailsPanel.setForeground(new Color(0, 0, 0));
	lockerDetailsPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Locker Details", TitledBorder.LEADING, TitledBorder.TOP, null, Color.LIGHT_GRAY));
	lockerDetailsPanel.setBackground(new Color(0, 102, 102));
	lockerDetailsPanel.setBounds(20, 150, 540, 105);
	getContentPane().add(lockerDetailsPanel);
	lockerDetailsPanel.setLayout(null);
	
	JLabel lblNewLabel = new JLabel("Locker Number");
	lblNewLabel.setForeground(Color.WHITE);
	lblNewLabel.setBounds(10, 45, 150, 20);
	lockerDetailsPanel.add(lblNewLabel);
	
	lockerNumberText = new JTextField();
	lockerNumberText.setEditable(false);
	lockerNumberText.setBounds(200, 45, 90, 20);
	lockerDetailsPanel.add(lockerNumberText);
	lockerNumberText.setColumns(10);
	
	JLabel lblNewLabel_1 = new JLabel("Locker Key");
	lblNewLabel_1.setForeground(Color.WHITE);
	lblNewLabel_1.setBounds(300, 20, 80, 20);
	lockerDetailsPanel.add(lblNewLabel_1);
	
	lockerKeyText = new JTextField();
	lockerKeyText.setEditable(false);
	lockerKeyText.setBounds(400, 20, 100, 20);
	lockerDetailsPanel.add(lockerKeyText);
	lockerKeyText.setColumns(10);
	//if user then textfield replace to combobox
	JLabel lblNewLabel_2 = new JLabel("Locker Size");
	lblNewLabel_2.setForeground(Color.WHITE);
	lblNewLabel_2.setBounds(10, 20, 80, 20);
	JComboBox lockerSizeComboBox = new JComboBox();
	lockerSizeComboBox.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			try {
	            JComboBox<String> cb = (JComboBox<String>) e.getSource();
	            String selectedItem = (String) cb.getSelectedItem();
	            System.out.println("Selected item: " + selectedItem);
	            lockerSize=selectedItem;
	            int val=0;
	            if(selectedItem=="Small"){
	            	if(availableLockers.get(0)==3){
	            		 JOptionPane.showMessageDialog(null,"Small Locker Not Available");
	            	}
	            	else{
	            		val=1;
	            		
	            		fetchLockerDetails(val);
	            	}
	            }
	            else if (selectedItem=="Medium"){
	            
	            	if(availableLockers.get(1)==0){
	            		 JOptionPane.showMessageDialog(null,"Medium Locker Not Available");
	            	}
	            	else{
	            		val=2;
	            		fetchLockerDetails(val);
	            	}
	            }
	            else if(selectedItem=="Large"){
	            	
	            	if(availableLockers.get(2)==0){
	            		 JOptionPane.showMessageDialog(null,"Large Locker Not Available");
	            	}
	            	else{
	            		val=3;
	            		fetchLockerDetails(val);
	            	}
	            }
			} catch (Exception e2) {
				// TODO: handle exception
			}
		}
	});
	lockerSizeComboBox.setModel(new DefaultComboBoxModel(new String[] {"Small", "Medium", "Large"}));
	lockerSizeComboBox.setSelectedIndex(-1);
	lockerDetailsPanel.add(lblNewLabel_2);
	
//	operatingInstructionText = new JTextField();
//	JComboBox OperatingInstructionComboBox = new JComboBox();
//	OperatingInstructionComboBox.setModel(new DefaultComboBoxModel(new String[] {"Singly", "Either or Surviver", "Jointly by all of Us","Jointly by two of Us", "Others"}));
//	OperatingInstructionComboBox.setSelectedIndex(-1);

	modeOfOperationComboBox = new JComboBox();
	modeOfOperationComboBox.setModel(new DefaultComboBoxModel(new String[] {"Singly", "Either or Surviver", "Jointly by all of Us", "Jointly by two of Us", "Others"}));
	modeOfOperationComboBox.setSelectedIndex(-1);
	modeOfOperationComboBox.setMaximumRowCount(5);
	
	modeOfOperationText = new JTextField();
	lockerSizeText = new JTextField();
	if (chk==1 | chk==3) {

//		operatingInstructionText.setBounds(200, 70, 300, 20);
//		lockerDetailsPanel.add(operatingInstructionText);
//		operatingInstructionText.setColumns(10);
		

		lockerSizeText.setBounds(200, 20, 90, 20);
		lockerDetailsPanel.add(lockerSizeText);
		lockerSizeText.setColumns(10);
		lockerSizeText.setEditable(false);
		modeOfOperationText.setBounds(200, 70, 300, 20);
		lockerDetailsPanel.add(modeOfOperationText);
		modeOfOperationText.setColumns(10);
	}
	else if(chk==0){
//		OperatingInstructionComboBox.setBounds(200, 67, 300, 22);
//		lockerDetailsPanel.add(OperatingInstructionComboBox);
		lockerSizeComboBox.setBounds(200, 20, 90, 20);
		lockerDetailsPanel.add(lockerSizeComboBox);
		modeOfOperationComboBox.setBounds(200, 70, 300, 20);
		lockerDetailsPanel.add(modeOfOperationComboBox);
//		OperatingInstructionComboBox.addActionListener(new ActionListener() {
//			public void actionPerformed(ActionEvent e) {
//			});
		modeOfOperationComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					
				} catch (Exception e2) {
					// TODO: handle exception
				}
			}
			});
	}
	if(chk==1)
	{
		JButton rejectButton = new JButton("Reject");
	    rejectButton.addActionListener(new ActionListener() {
	    	public void actionPerformed(ActionEvent arg0) {
	    		 JPanel panel = new JPanel();
	    	        JTextArea textArea = new JTextArea(5, 20);
	    	        JScrollPane scrollPane = new JScrollPane(textArea);
	    	        panel.add(scrollPane);
	    	        UIManager.put("OptionPane.background", new ColorUIResource(0, 102, 102));
			        UIManager.put("Panel.background", new ColorUIResource(0, 102, 102));
	    	        Object[] options = { "Reject", "Cancel" };

	    	        // Show the confirm dialog with custom button labels
	    	        int result = JOptionPane.showOptionDialog(null, panel, "Enter Comments", JOptionPane.OK_CANCEL_OPTION,
	    	                JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
	    	        // Check if the user clicked the OK button
	    	        if (result == JOptionPane.OK_OPTION) {
	    	            String comment = textArea.getText();
	    	            try {

							Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
							java.sql.Connection connection = null;
							java.sql.Statement  lcl_stmt =null;
							connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
							
							PreparedStatement statement = connection.prepareStatement("select * from lockerassigned_tr where LOCKERNUM=?");
						
							statement.setString(1,lockerNumber);
							
						
							ResultSet result2 = statement.executeQuery();
							System.out.println("DB successful");
								if (result2.next()) {
									int ASSIGNEDID = result2.getInt("ASSIGNEDID");
					                int VOUCHERID = result2.getInt("VOUCHERID");
					                int CUSTOMERID = result2.getInt("CUSTOMERID");
					                int DEPOSITAMOUNT = result2.getInt("DEPOSITAMOUNT");
					                String OVERDUE = result2.getString("OVERDUE");
					                String LASTRECOVERDATE = result2.getString("LASTRECOVERDATE");
					                int RENTSTATUS = result2.getInt("RENTSTATUS");
					                String ASSIGNEDDATE = result2.getString("ASSIGNEDDATE");
					                String COMMENTS = result2.getString("COMMENTS");
					                int NOTIFYUSER = result2.getInt("NOTIFYUSER");
					                String LOCKERNUM = result2.getString("LOCKERNUM");
					                String insertQuery="";
					                String deleteQuery="DELETE FROM lockerassigned_tr WHERE LOCKERNUM=?";
					                String deleteTl= "DELETE FROM lockerassigned_tl WHERE LOCKERNUM=?";
					                
					                System.out.println("next");
					                //Insert
					                	SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
					                    Date currentDate = new Date(System.currentTimeMillis());
						                ASSIGNEDDATE=formatter.format(currentDate);
						                System.out.println(ASSIGNEDDATE);
						                 insertQuery = "INSERT INTO lockerassigned_tl (ASSIGNEDID, VOUCHERID,CUSTOMERID,DEPOSITAMOUNT," +
						                "OVERDUE,LASTRECOVERDATE,RENTSTATUS,ASSIGNEDDATE,COMMENTS,NOTIFYUSER,LOCKERNUM) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
						                
						        
						                	  insertQuery = "INSERT INTO lockerassigned_ht (ASSIGNEDID, VOUCHERID,CUSTOMERID,DEPOSITAMOUNT," +
										     "OVERDUE,LASTRECOVERDATE,RENTSTATUS,ASSIGNEDDATE,COMMENTS,NOTIFYUSER,LOCKERNUM) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
										}
					                
					                PreparedStatement insertStatement = connection.prepareStatement(insertQuery);
					                insertStatement.setInt(1, ASSIGNEDID);
					                insertStatement.setInt(2, VOUCHERID);
					                insertStatement.setInt(3, CUSTOMERID);
					                insertStatement.setInt(4, DEPOSITAMOUNT);
					                insertStatement.setString(5, OVERDUE);
					                insertStatement.setString(6, LASTRECOVERDATE);
					                insertStatement.setInt(7, RENTSTATUS);
					                insertStatement.setString(8, ASSIGNEDDATE);
					                insertStatement.setString(9, COMMENTS);
					                insertStatement.setInt(10, NOTIFYUSER);
					                insertStatement.setString(11, LOCKERNUM);
					                // Set other column values as needed

					                int res=insertStatement.executeUpdate();
					                System.out.println("next");
					                System.out.println(res);
					                if(res>0){
					                	
					                	System.out.println("new");
					                	System.out.println(res);

					                	if(RENTSTATUS==1)
					                	{
					                		PreparedStatement delete = connection.prepareStatement(deleteTl);
					                		delete.setString(1, lockerNumber);
					                		delete.execute();
					                	}
	            		                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
	            		                deleteStatement.setString(1, lockerNumber);
	            		                deleteStatement.execute();
					                	System.out.println("delete");
					                	
					                }
					                
					                result.close();
					                statement.close();
					                connection.close();
					       
					                System.out.println("Row inserted successfully!");
					                JOptionPane.showMessageDialog(null, "Authorize");
					                
								}
					
							if (rowsUpdated!=0) {
								UIManager.put("OptionPane.background", new ColorUIResource(255, 255, 255));
								UIManager.put("Panel.background", new ColorUIResource(255, 255, 255));
					            JOptionPane.showMessageDialog(null, "<html>Your Comment:<br>" + comment + "<br>send to User</html>");
							}
						} catch (Exception e) {
							// TODO: handle exception
							System.out.print(e.getMessage());
						}
	    	            newMainMenu obj = new newMainMenu(1);
	    		    	obj.setSize(600, 500);
	    		    	obj.setVisible(true);
	    		    	dispose();
	    	        } else if (result == JOptionPane.CANCEL_OPTION) {
	    	            // Close the JOptionPane
	    	            System.exit(0);
	    	        }
	    	}
	    });
	    rejectButton.setBounds(20, 410, 90, 30);
	    getContentPane().add(rejectButton);
	    
	    JButton referBackButton = new JButton("Refer Back");
	    referBackButton.addActionListener(new ActionListener() {
	    	public void actionPerformed(ActionEvent arg0) {
	   		 JPanel panel = new JPanel();
		        JTextArea textArea = new JTextArea(5, 20);
		        JScrollPane scrollPane = new JScrollPane(textArea);
		        panel.add(scrollPane);
		        UIManager.put("OptionPane.background", new ColorUIResource(0, 102, 102));
		        UIManager.put("Panel.background", new ColorUIResource(0, 102, 102));
		        // Set the background color of the pop-up box
		        Object[] options = { "Refer Back", "Cancel" };

		        // Show the confirm dialog with custom button labels
		        int result = JOptionPane.showOptionDialog(null, panel, "Enter Comments", JOptionPane.OK_CANCEL_OPTION,
		                JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
		        
		        // Check if the user clicked the OK button
		        if (result == JOptionPane.OK_OPTION) {
			            String comment = textArea.getText();

				            try {
				            	Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
								java.sql.Connection connection = null;
								java.sql.Statement  lcl_stmt =null;
								connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
								
								PreparedStatement statement = connection.prepareStatement("UPDATE lockerassigned_tr SET COMMENTS = ?, NOTIFYUSER = ? WHERE LOCKERNUM = ? ;");				
								statement.setString(1,comment);
								statement.setInt(2,1);
								statement.setString(3,lockerNumber);
								
								int rowsUpdated = statement.executeUpdate();
								System.out.print(comment);
								if (rowsUpdated!=0) {
									UIManager.put("OptionPane.background", new ColorUIResource(255, 255, 255));
									UIManager.put("Panel.background", new ColorUIResource(255, 255, 255));
						            JOptionPane.showMessageDialog(null, "<html>Your Comment:<br>" + comment + "<br>send to User</html>");
								}
							} catch (Exception e) {
								// TODO: handle exception
								System.out.print(e.getMessage());
							}
			            newMainMenu obj = new newMainMenu(1);
				    	obj.setSize(600, 500);
				    	obj.setVisible(true);
				    	dispose();
		        } else if (result == JOptionPane.CANCEL_OPTION) {
		            // Close the JOptionPane
		            System.exit(0);
		        }
		}
	    });
	    referBackButton.setBounds(120, 410, 100, 30);
	    getContentPane().add(referBackButton);

	}
	
	JLabel lblLockerStatus = new JLabel("Rent Status");
	lblLockerStatus.setForeground(Color.WHITE);
	lblLockerStatus.setBounds(300, 45, 80, 20);
	lockerDetailsPanel.add(lblLockerStatus);
	
	rentStatusText = new JTextField();
	rentStatusText.setEditable(false);
	rentStatusText.setBounds(400, 45, 100, 20);
	lockerDetailsPanel.add(rentStatusText);
	rentStatusText.setColumns(10);
	
	JLabel lblNewLabel_9 = new JLabel("Mode Of Operation");
	lblNewLabel_9.setForeground(Color.WHITE);
	lblNewLabel_9.setBounds(10, 70, 120, 20);
	lockerDetailsPanel.add(lblNewLabel_9);
	
	DepositDetailsPanel.setForeground(new Color(0, 0, 0));
	DepositDetailsPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Rent & Security Deposit Details", TitledBorder.LEADING, TitledBorder.TOP, null, Color.LIGHT_GRAY));
	DepositDetailsPanel.setBackground(new Color(0, 102, 102));
	DepositDetailsPanel.setBounds(20, 265, 540, 100);
	// DepositDetailsPanel.setBounds(20, 290, 540, 125);
	getContentPane().add(DepositDetailsPanel);
	DepositDetailsPanel.setLayout(null);
	final JLabel lbldateFormat = new JLabel("Date format: dd/MM/yyyy");
	JLabel lblNewLabel_4 = new JLabel("Mode Of Payment");
	lblNewLabel_4.setForeground(Color.WHITE);
	lblNewLabel_4.setBounds(10, 20, 120, 20);
	DepositDetailsPanel.add(lblNewLabel_4);

	lblExpiryDate.setForeground(Color.WHITE);
	depositText = new JTextField();
	depositText.setBounds(200, 45, 90, 20);
	DepositDetailsPanel.add(depositText);
	depositText.setColumns(10);
	
	JLabel lblNewLabel_6 = new JLabel("Overdue Date");
	lblNewLabel_6.setForeground(Color.WHITE);
	lblNewLabel_6.setBounds(300, 45, 80, 20);
	DepositDetailsPanel.add(lblNewLabel_6);
	
	overdueDateText = new JTextField();
	overdueDateText.setBounds(400, 45, 100, 20);
	DepositDetailsPanel.add(overdueDateText);
	overdueDateText.setColumns(10);
	
	JLabel lblNewLabel_7 = new JLabel("Last Rent Recover Date");
	lblNewLabel_7.setForeground(Color.WHITE);
	lblNewLabel_7.setBounds(10, 70, 150, 20);
	DepositDetailsPanel.add(lblNewLabel_7);
	
	recoverDateText = new JTextField();
	recoverDateText.setBounds(200, 70, 90, 20);
	DepositDetailsPanel.add(recoverDateText);
	recoverDateText.setColumns(10);
	
	////

	//Mode of Payment
	if(chk==0 | chk==2)
	{
				JComboBox modeOfPaymentComboBox = new JComboBox();
				modeOfPaymentComboBox.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								try {
									
					            JComboBox<String> cb = (JComboBox<String>) e.getSource();
					            String selectedItem = (String) cb.getSelectedItem();
					            System.out.println("Selected item: " + selectedItem);
					            paymentMode=selectedItem;
					            
					            int val=0;
					            if(selectedItem=="Complementary"){
					            	// Set the new bounds here
					            		DepositDetailsPanel.setBounds(20, 265, 540, 125);
					            		lblExpiryDate.setBounds(10, 95, 150, 20);
					            		lblExpiryDate.setForeground(Color.WHITE);
					            		DepositDetailsPanel.add(lblExpiryDate);
					                   	lblExpiryDate.setVisible(true);
					            		expiryDateText = new JTextField();
					            		expiryDateText.setBounds(200, 95, 90, 20);
					                    expiryDateText.setVisible(true);
					            		DepositDetailsPanel.add(expiryDateText);
					            		expiryDateText.setColumns(10);
					            		
//					            		lbldateFormat = new JLabel()
					            		lbldateFormat.setBounds(300, 95, 150, 20);
					            		lbldateFormat.setForeground(new Color(0, 0, 0));					            		
					            		DepositDetailsPanel.add(lbldateFormat);
					            		lbldateFormat.setForeground(Color.WHITE);
					            		lbldateFormat.setVisible(true);
					            		lbldateFormat.setEnabled(false);
					            		
					            		expiryDateText.addFocusListener(new FocusAdapter() {
					            			@Override
					            			public void focusLost(FocusEvent e) {
					            				
					            				
					            				///
					            				String text=expiryDateText.getText();
					            				System.out.print(text);
					            				boolean ans=formatDate(text);
					            				if(!ans){
					            					JOptionPane.showMessageDialog(null,"Invalid Date");
					            				}
					            				
					            			}
					            		});
					                 // Repaint the panel to reflect changes
						                 DepositDetailsPanel.revalidate();
						                 DepositDetailsPanel.repaint();
					            	
					            }
					            else if (selectedItem=="Security Deposit" || selectedItem=="Yearly Rent"){
					            	DepositDetailsPanel.setBounds(20, 265, 540, 100);
					            	DepositDetailsPanel.revalidate();
					                DepositDetailsPanel.repaint();
					                expiryDateText.setVisible(false);
					            	lblExpiryDate.setVisible(false);
					            	lbldateFormat.setVisible(false);
					            	
					            }
								} catch (Exception e2) {
									// TODO: handle exception
								}
							}
							});

					modeOfPaymentComboBox.setMaximumRowCount(3);
					modeOfPaymentComboBox.setModel(new DefaultComboBoxModel(new String[] {"Complementary", "Security Deposit", "Yearly Rent"}));
					modeOfPaymentComboBox.setSelectedIndex(-1);
					modeOfPaymentComboBox.setBounds(200, 20, 300, 20);
					DepositDetailsPanel.add(modeOfPaymentComboBox);
				}
				else if(chk==1 | chk==3)
				{
					modeOfPaymentText = new JTextField();
					modeOfPaymentText.setBounds(200, 20, 300, 20);
					DepositDetailsPanel.add(modeOfPaymentText);
					modeOfPaymentText.setColumns(10);	
					customerNameText.setEditable(false);
					correspondedAddressText.setEditable(false);
					mobileNumberText.setEditable(false);
					accountNumberText.setEditable(false);
					lockerSizeText.setEditable(false);
					lockerKeyText.setEditable(false);
					lockerNumberText.setEditable(false);
					rentStatusText.setEditable(false);
//					operatingInstructionText.setEditable(false);
					modeOfOperationText.setEditable(false);
					modeOfPaymentText.setEditable(false);
					depositText.setEditable(false);
					overdueDateText.setEditable(false);
					recoverDateText.setEditable(false);

				}
				if(chk==2)
				{
					lockerSizeText.setBounds(200, 20, 90, 20);
					lockerDetailsPanel.add(lockerSizeText);
					lockerSizeText.setColumns(10);
					lockerSizeText.setEnabled(false);

//					operatingInstructionText.setEditable(true);
					depositText.setEditable(true);
					overdueDateText.setEditable(true);
					recoverDateText.setEditable(true);
					modeOfOperationComboBox.setBounds(200, 70, 300, 20);
					lockerDetailsPanel.add(modeOfOperationComboBox);
//					OperatingInstructionComboBox.addActionListener(new ActionListener() {
//						public void actionPerformed(ActionEvent e) {
//						});
					modeOfOperationComboBox.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) {
					
						}
						});
				}
	JLabel lblNewLabel_5 = new JLabel("Rent/Security Deposit");
	lblNewLabel_5.setForeground(Color.WHITE);
	lblNewLabel_5.setBounds(10, 45, 150, 20);
	DepositDetailsPanel.add(lblNewLabel_5);
	
	
	JButton backButton = new JButton("Back");
	backButton.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			if (chk==0) {
				newLockerIssuance obj=new newLockerIssuance(0);
				obj.setVisible(true);
				obj.setSize(600, 500);
				dispose();
			}else if(chk==1){
				newGrid obj=new newGrid(1);
				obj.setVisible(true);
				obj.setSize(600, 500);
				dispose();
			}
			else if(chk==2){
				newLockerMaintenance obj=new newLockerMaintenance(2);
				obj.setVisible(true);
				obj.setSize(600, 500);
				dispose();
			}
			else if(chk==3){
				newLockerMaintenance obj=new newLockerMaintenance(3);
				obj.setVisible(true);
				obj.setSize(600, 500);
				dispose();
			}
			
			
		}
	});
	backButton.setBounds(370, 410, 90, 30);
	getContentPane().add(backButton);
	
	JButton signOffButton = new JButton("Sign Off");
	signOffButton.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent arg0) {
			newLogIn obj=new newLogIn();
			obj.setVisible(true);
			obj.setSize(600, 500);
			dispose();
		}
	});
	signOffButton.setBounds(470, 410, 90, 30);
	getContentPane().add(signOffButton);
//date
	newMainMenu date = new newMainMenu(1);
    JLabel dateLabel = new JLabel(date.getCurrentDate());
    dateLabel.setForeground(Color.WHITE);
    dateLabel.setHorizontalAlignment(SwingConstants.LEFT);
    dateLabel.setVerticalAlignment(SwingConstants.BOTTOM);
    dateLabel.setBounds(10, 440, 570, 20);
    getContentPane().add(dateLabel);
    
    JButton saveButton = new JButton(chk==1 ? "Authorize" : chk==2 ? "Update": chk==3 ? "Surrender": "Save");
    saveButton.addActionListener(new ActionListener() {
    	public void actionPerformed(ActionEvent arg0) {
    		if(chk==0)
    		{
    			//user query 
    			
	            JOptionPane.showMessageDialog(null, "Save");
    		}else if(chk==1){
				//authorizer
    			try {
						Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
						java.sql.Connection connection = null;
						java.sql.Statement  lcl_stmt =null;
						connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
						
						PreparedStatement statement = connection.prepareStatement("select * from lockerassigned_tr where LOCKERNUM=?");
					
						statement.setString(1,lockerNumber);
						
					
						ResultSet result = statement.executeQuery();
						System.out.println("DB successful");
							if (result.next()) {
								int ASSIGNEDID = result.getInt("ASSIGNEDID");
				                int VOUCHERID = result.getInt("VOUCHERID");
				                int CUSTOMERID = result.getInt("CUSTOMERID");
				                int DEPOSITAMOUNT = result.getInt("DEPOSITAMOUNT");
				                String OVERDUE = result.getString("OVERDUE");
				                String LASTRECOVERDATE = result.getString("LASTRECOVERDATE");
				                int RENTSTATUS = result.getInt("RENTSTATUS");
				                String ASSIGNEDDATE = result.getString("ASSIGNEDDATE");
				                String COMMENTS = result.getString("COMMENTS");
				                int NOTIFYUSER = result.getInt("NOTIFYUSER");
				                String LOCKERNUM = result.getString("LOCKERNUM");
				                String insertQuery="";
				                String deleteQuery="DELETE FROM lockerassigned_tr WHERE LOCKERNUM=?";
				                String deleteTl= "DELETE FROM lockerassigned_tl WHERE LOCKERNUM=?";
				                
				                System.out.println("next");
				                //Insert
				                if(RENTSTATUS==0)
				                {
				                	SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
				                    Date currentDate = new Date(System.currentTimeMillis());
					                ASSIGNEDDATE=formatter.format(currentDate);
					                System.out.println(ASSIGNEDDATE);
					                 insertQuery = "INSERT INTO lockerassigned_tl (ASSIGNEDID, VOUCHERID,CUSTOMERID,DEPOSITAMOUNT," +
					                "OVERDUE,LASTRECOVERDATE,RENTSTATUS,ASSIGNEDDATE,COMMENTS,NOTIFYUSER,LOCKERNUM) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
					                
					                }
					                else if(RENTSTATUS==1)
					                {
					                	  insertQuery = "INSERT INTO lockerassigned_ht (ASSIGNEDID, VOUCHERID,CUSTOMERID,DEPOSITAMOUNT," +
									     "OVERDUE,LASTRECOVERDATE,RENTSTATUS,ASSIGNEDDATE,COMMENTS,NOTIFYUSER,LOCKERNUM) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
									}
				                
				                PreparedStatement insertStatement = connection.prepareStatement(insertQuery);
				                insertStatement.setInt(1, ASSIGNEDID);
				                insertStatement.setInt(2, VOUCHERID);
				                insertStatement.setInt(3, CUSTOMERID);
				                insertStatement.setInt(4, DEPOSITAMOUNT);
				                insertStatement.setString(5, OVERDUE);
				                insertStatement.setString(6, LASTRECOVERDATE);
				                insertStatement.setInt(7, RENTSTATUS);
				                insertStatement.setString(8, ASSIGNEDDATE);
				                insertStatement.setString(9, COMMENTS);
				                insertStatement.setInt(10, NOTIFYUSER);
				                insertStatement.setString(11, LOCKERNUM);
				                // Set other column values as needed

				                int res=insertStatement.executeUpdate();
				                System.out.println("next");
				                System.out.println(res);
				                if(res>0){
				                	
				                	System.out.println("new");
				                	System.out.println(res);

				                	if(RENTSTATUS==1)
				                	{
				                		PreparedStatement delete = connection.prepareStatement(deleteTl);
				                		delete.setString(1, lockerNumber);
				                		delete.execute();
				                	}
            		                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
            		                deleteStatement.setString(1, lockerNumber);
            		                deleteStatement.execute();
				                	System.out.println("delete");
				                	
				                }
				                
				                result.close();
				                statement.close();
				                connection.close();
				       
				                System.out.println("Row inserted successfully!");
				                JOptionPane.showMessageDialog(null, "Authorize");
				                
							}
				} catch (Exception e) {
					// TODO: handle exception
					System.out.println(e.getMessage());
//					e.printStackTrace();
				}
//    			try {
//					Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
//					java.sql.Connection connection = null;
//					java.sql.Statement  lcl_stmt =null;
//					connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
//					String deleteQuery = "DELETE FROM lockerassigned_tr WHERE LOCKERNUM=?";
//
//	                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
//	                deleteStatement.executeUpdate();
//	                deleteStatement.close();
//	                connection.close();
//					
//				} catch (Exception e) {
//					// TODO: handle exception
//					System.out.println("connection fail! FOR DELETE QUERY");
//				}
			}else if(chk==2){
				//authorizer
    			
	            JOptionPane.showMessageDialog(null, "Maintenance");
			}else if(chk==3){
				//authorizer
    			
	            JOptionPane.showMessageDialog(null, "Surrender");
			}
    	}
    });
    saveButton.setBounds(260, 410, 100, 30);
    getContentPane().add(saveButton);
    
    }
	
	// functions declarations
	public boolean formatDate(String inp){
		Scanner scanner = new Scanner(System.in);
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        sdf.setLenient(false); // Set lenient property to false
        try {
            java.util.Date date = sdf.parse(inp);
            int month = date.getMonth() + 1; // Extract month value
            if (month > 12) {
            	JOptionPane.showMessageDialog(null,"Invalid Month");
                System.out.println("Invalid month. Please enter a month between 1 and 12.");
                return false;
            }
            System.out.println("The date you entered is: "+ sdf.format(date));
  //          System.out.println("The date you entered is: " +  new Date());
            Date currentDate = new Date();
            return !date.before(currentDate);
        } catch (ParseException e) {
            System.out.println("Invalid date format. Please try again.");
            return false;
        }
	}
	
	
	public static boolean validateDate(String dateString) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        dateFormat.setLenient(false); // Disallow lenient parsing

        try {
            Date date = dateFormat.parse(dateString);
            Date currentDate = new Date(); // Get the current date
//            System.out.println(date);
//            System.out.println(currentDate);
            System.out.println("The date you entered is: " + date.getDate()+"  "+ date.getMonth()+ "  "+date.getYear());
            return !date.before(currentDate); // Check if the date is not before the current date
        } catch (ParseException e) {
        	System.out.println(e.getMessage());
            return false; // Invalid date format
        }
    }
	
	
	
	public void insertData(HashMap<String,String> custAccRelation ){
		
//		this.accountNum=custAccRelation.get("accountnum");
//		this.branchcodeid=custAccRelation.get("branchcodeid");
//		customerNameText.setText(custAccRelation.get("customername"));
//		contactInformationText.setText(custAccRelation.get("contactno"));
//		emailText.setText(custAccRelation.get("email"));
//		customerNameText.setEditable(false);
//		contactInformationText.setEditable(false);
//		emailText.setEditable(false);
//		titleOfAccountText.setText(custAccRelation.get("accounttitle"));
//		operatingInstructionText.setText(custAccRelation.get("operatinginstruction"));
////		openInBranchText.setText(custAccRelation.get("branchcode"));
//		titleOfAccountText.setEditable(false);
//		operatingInstructionText.setEditable(false);
////		openInBranchText.setEditable(false);
	}
//	
//	
//	
//	public void insertArray(ArrayList<Integer> arr){
//		availableLockers=arr;
//	}
	
	
	
	public void fetchLockerDetails(int val){
		try{
			lockerSizeId=val;
			Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
			java.sql.Connection connection = null;
			java.sql.Statement  lcl_stmt =null;
			connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
						
			String query="select l.lockersizeid,l.lockersize,c.charges, s.secdeposit from lockersize l,lockercharges c,lockersecuritydeposit s where l.lockerchargesid=c.lockerchargesid and l.secdepositid=s.secdepositid and l.lockersizeid=?;";
			PreparedStatement statement = connection.prepareStatement(query);
			
			statement.setInt(1, val);
			
			ResultSet result = statement.executeQuery();
			
			if (result.next()) {
//			    String secDeposit = result.getString("SECDEPOSIT");
//			    Integer charges= result.getInt("CHARGES");
//			    
//			   securityDepositText.setEnabled(true);
//			   yearlyRentText.setEnabled(true);
//			   
//			   securityDepositText.setText(secDeposit);
//			   yearlyRentText.setText(Integer.toString(charges));
//			    		
//			     	 
//			   securityDepositLabel.setEnabled(true);
//			   yearlyRentLabel.setEnabled(true);
//			    
//			   
			}
			
		}
		catch(Exception e){
			System.out.println(e.getMessage());
			 JOptionPane.showMessageDialog(null,"DB Connection Failed");
		}
	
	}

	// customer Details fetching function
	public void getCustDetails(String lockerNumber){
			
			try{
				
				Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
				java.sql.Connection connection = null;
				java.sql.Statement  lcl_stmt =null;
				connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
							
				String query="select c.customerid,c.customername,c.email, c.contactno  from Accountnew a, customerAccountRelationship r, customer c where a.accountNum=r.accountNum and r.customerId=c.customerid and a.accountNum=?;";
				PreparedStatement statement = connection.prepareStatement(query);
				
				statement.setString(1, lockerNumber);
				
				ResultSet result = statement.executeQuery();
				
				String queryAccount="select  a.accountNum,a.accounttitle, a.branchCode, o.operatinginstruction from accountnew a,operatinginstruction o where a.operatinginstructionid=o.operatinginstructionid  and accountnum=?;";
				PreparedStatement statementAccount = connection.prepareStatement(queryAccount);
				
				statementAccount.setString(1, lockerNumber);
				
				ResultSet resultAccount = statementAccount.executeQuery();
				
				HashMap<String, String> customerAccountRelationship = new HashMap<String, String>();
				if(resultAccount.next()){
					customerAccountRelationship.put("accounttitle",resultAccount.getString("ACCOUNTTITLE")) ;
					Global.accountNum(resultAccount.getString("ACCOUNTNUM"));
					int branchCode=resultAccount.getInt("BRANCHCODE");
					if(branchCode==1001){
						customerAccountRelationship.put("branchcode","No - Digital Account") ;
					}
					else{
						customerAccountRelationship.put("branchcode","Yes - "+ Integer.toString(resultAccount.getInt("BRANCHCODE"))) ;
					}
					customerAccountRelationship.put("branchcodeid",Integer.toString(resultAccount.getInt("BRANCHCODE"))) ;
					customerAccountRelationship.put("operatinginstruction", resultAccount.getString("OPERATINGINSTRUCTION")) ;
					customerAccountRelationship.put("accountnum", resultAccount.getString("ACCOUNTNUM")) ;
	
				}
				
				
				
				if (result.next()) {
					customerAccountRelationship.put("customername",result.getString("CUSTOMERNAME")) ;
					customerAccountRelationship.put("contactno",result.getString("CONTACTNO")) ;
					customerAccountRelationship.put("email", result.getString("EMAIL")) ;
					Global.customerId= result.getInt("customerid");
				    customerDetails obj= new customerDetails(0);
				    	obj.insertData(customerAccountRelationship);
				    	obj.insertArray(availableLockers);
						obj.setVisible(true);
						obj.setSize(600,500);
						dispose();
				  
				   
				}
				else{
					 JOptionPane.showMessageDialog(null,"Customer Details Not Found");
				}
			}
			catch(Exception e){
				JOptionPane.showMessageDialog(null,"Could not connect to DB");
				System.out.println(e);
			}
			
			
			
	}
	public void fetchDetails()
	{
		try {
		Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
		java.sql.Connection connection = null;
		java.sql.Statement  lcl_stmt =null;
		connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
		
		PreparedStatement statement = connection.prepareStatement("select temp.customername,temp.email, temp.contactno,temp.accountNum,temp.lockerno,temp.lockersizeid,temp.keynum, temp.rentstatus,temp.depositamount,temp.overdue, temp.lastrecoverdate, p.modeofpayment,p.expiry_date, o.modeofoperation from modeofpayment p,("
				+ "select *,tr.lockernum as lockerno  from lockerAssigned_tr tr, locker l,customer c, voucher_master_tl v where tr.lockernum=l.lockernum and tr.voucherid=v.voucherid and tr.customerid=c.customerid and tr.lockernum=?) temp"
				+ ", modeofoperation o where temp.modeofoperationid=o.modeofoperationid and temp.modeofpaymentid=p.modeofpaymentid;");
	
		statement.setString(1,lockerNumber);
		ResultSet result = statement.executeQuery();
		System.out.println("After Execution");
		
		if (result.next()) {
//			System.out.println(result.getString("AUTH"));
//			Global.userId=result.getInt("USERID");
			customerNameText.setText(result.getString("CUSTOMERNAME"));
			correspondedAddressText.setText(result.getString("EMAIL"));
			mobileNumberText.setText(result.getString("CONTACTNO"));
			
			accountNumberText.setText(result.getString("ACCOUNTNUM"));
			
			lockerSizeText.setText(lockerSizeName.get(result.getInt("LOCKERSIZEID")));
			
			lockerKeyText.setText(result.getString("KEYNUM"));
			
			rentStatusText.setText(rentStatus.get(result.getInt("RENTSTATUS")));
			lockerNumberText.setText(result.getString("LOCKERNO"));
			
			modeOfOperationText.setText(result.getString("MODEOFOPERATION"));
			
			modeOfPaymentText.setText(result.getString("MODEOFPAYMENT"));
//			depositText.setText(result.getString("DEPOSITAMOUNT"));
			
			overdueDateText.setText(result.getString("OVERDUE"));
			depositText.setText(Integer.toString(result.getInt("DEPOSITAMOUNT")));
			recoverDateText.setText(result.getString("LASTRECOVERDATE"));
			
			if(result.getString("MODEOFOPERATION").equals("Complementary")) {
//				expiryTextField = new JTextField();
//				expiryTextField.setBounds(400, 70, 100, 20);
//				DepositDetailsPanel.add(expiryTextField);
//				expiryTextField.setColumns(10);
//				expiryTextField.setText(result.getString("EXPIRY_DATE"));
//				expiryTextField.setEditable(false);
//				
//				JLabel lblNewLabel_3 = new JLabel("Expiry");
//				lblNewLabel_3.setForeground(new Color(255, 255, 255));
//				lblNewLabel_3.setBounds(300, 73, 56, 14);
//				DepositDetailsPanel.add(lblNewLabel_3);
				
				
				
				DepositDetailsPanel.setBounds(210, 265, 540, 125);
        		lblExpiryDate.setBounds(10, 95, 150, 20);
        		lblExpiryDate.setForeground(Color.WHITE);
        		DepositDetailsPanel.add(lblExpiryDate);
               	lblExpiryDate.setVisible(true);
        		expiryDateText = new JTextField();
        		expiryDateText.setBounds(200, 95, 90, 20);
                expiryDateText.setVisible(true);
        		DepositDetailsPanel.add(expiryDateText);
        		expiryDateText.setColumns(10);
        		
        		
        		
				
				
//        		DepositDetailsPanel.add(expiryTextField);
//        		
//        		DepositDetailsPanel.setForeground(new Color(0, 0, 0));
//        		DepositDetailsPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Rent & Security Deposit Details", TitledBorder.LEADING, TitledBorder.TOP, null, Color.LIGHT_GRAY));
//        		DepositDetailsPanel.setBackground(new Color(0, 102, 102));
//        		DepositDetailsPanel.setBounds(20, 265, 540, 100);
//        		 DepositDetailsPanel.revalidate();
//                 DepositDetailsPanel.repaint();
                 
			}
		
		}
		else
		{
			JOptionPane.showMessageDialog(null,"Locker Number Not Found");
		}
		
	} catch (Exception e) {
		System.out.println(e.getMessage());
		// TODO: handle exception
		System.out.println("DB Connection fail");
		JOptionPane.showMessageDialog(null,"DB Connection Failed");
	}
	}
	 public static void main(String[] args) {
		 newDetails frame = new newDetails(1,"A120");
	    	frame.setSize(600, 500);
	    	frame.setVisible(true);
	    	
	    }
}


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationStatement(ASTConverter.java:3030)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleLocalDeclaration(ASTConverter.java:400)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:532)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:206)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2023-12-28 12:24:41.839
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationStatement(ASTConverter.java:3030)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleLocalDeclaration(ASTConverter.java:400)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:532)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:206)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2023-12-28 12:24:41.839
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationStatement(ASTConverter.java:3030)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleLocalDeclaration(ASTConverter.java:400)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:532)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:206)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2023-12-28 12:24:43.293
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package LockerManagement;
import javax.swing.JFrame;
import java.awt.Color;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.UIManager;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Point;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Scanner;
import java.awt.Font;
import javax.swing.JInternalFrame;
import javax.swing.plaf.ColorUIResource;
import javax.swing.text.DateFormatter;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.BorderLayout;
import javax.swing.JLayeredPane;
import java.awt.GridLayout;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import java.awt.Panel;
import javax.swing.border.TitledBorder;
import java.awt.Component;
import java.awt.Dimension;
import javax.swing.border.EtchedBorder;
public class newDetails extends JFrame {

	public int chk;
	public String lockerNumber;
	public Integer lockerSizeId;
	private JTextField customerNameText;
	private JTextField correspondedAddressText;
	private JTextField mobileNumberText;
	private JTextField accountNumberText;
	private JTextField lockerNumberText;
	private JTextField lockerKeyText;
	private JTextField lockerSizeText;
	private JTextField rentStatusText;
//	private JTextField operatingInstructionText;
	private JTextField depositText;
	private JTextField overdueDateText;
	private JTextField recoverDateText;
	private JTextField modeOfOperationText;
	private JComboBox modeOfOperationComboBox;
	ArrayList<Integer> availableLockers;
	public String lockerSize;
	public String paymentMode;
	private JTextField expiryDateText;
	private JTextField modeOfPaymentText;
	final JPanel DepositDetailsPanel = new JPanel();
	final JLabel lblExpiryDate = new JLabel("Expiry Date");
	HashMap<Integer, String> lockerSizeName = new HashMap<>();
	HashMap<Integer, String> rentStatus = new HashMap<>();
	//Constructor
	/**
	 * @wbp.parser.constructor
	 */
	public newDetails(final int chk)
	{
		this.chk=chk;
		customerPanel();

	}
	public newDetails(final int chk, String lockerNumber)
	{
		  // Set names using put method
        lockerSizeName.put(1, "Small");
        lockerSizeName.put(2, "Medium");
        lockerSizeName.put(3, "Large");
        rentStatus.put(0,"Assign");
        rentStatus.put(1,"Surrender");
		this.lockerNumber=lockerNumber;
		this.chk=chk;
		if (chk==1) {
			customerPanel();
			fetchDetails();
		}
//		System.out.println(lockerSizeText);

	}
public void customerPanel()
{
	getContentPane().setBackground(new Color(0, 102, 102));
	getContentPane().setLayout(null);
	setSize(new Dimension(600, 500));
	setResizable(false);
	setLocation(new Point(500, 200));
	setTitle("Customer Details");
	JPanel customerDetailsPanel = new JPanel();
	customerDetailsPanel.setForeground(new Color(0, 0, 0));
	customerDetailsPanel.setBackground(new Color(0, 102, 102));
	customerDetailsPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Customer Details", TitledBorder.LEADING, TitledBorder.TOP, null, Color.LIGHT_GRAY));
	customerDetailsPanel.setBounds(20, 10, 540, 130);
	getContentPane().add(customerDetailsPanel);
	customerDetailsPanel.setLayout(null);
	
	JLabel lblCustomerName = new JLabel("Customer Name");
	lblCustomerName.setForeground(Color.WHITE);
	lblCustomerName.setBounds(10, 20, 120, 20);
	customerDetailsPanel.add(lblCustomerName);
	
	customerNameText = new JTextField();
	customerNameText.setBounds(200, 20, 300, 20);
	customerDetailsPanel.add(customerNameText);
	customerNameText.setColumns(10);
	
	JLabel lblEmail = new JLabel("Email");
	lblEmail.setForeground(Color.WHITE);
	lblEmail.setBounds(10, 45, 150, 20);
	customerDetailsPanel.add(lblEmail);
	
	correspondedAddressText = new JTextField();
	correspondedAddressText.setBounds(200, 45, 300, 20);
	customerDetailsPanel.add(correspondedAddressText);
	correspondedAddressText.setColumns(10);
	
	JLabel lblConatctNumber = new JLabel("Contact Number");
	lblConatctNumber.setForeground(Color.WHITE);
	lblConatctNumber.setBounds(10, 70, 120, 20);
	customerDetailsPanel.add(lblConatctNumber);
	
	mobileNumberText = new JTextField();
	mobileNumberText.setBounds(200, 70, 300, 20);
	customerDetailsPanel.add(mobileNumberText);
	mobileNumberText.setColumns(10);
	
	JLabel lblAccountNumber = new JLabel("Account Number");
	lblAccountNumber.setForeground(Color.WHITE);
	lblAccountNumber.setBounds(10, 95, 120, 20);
	customerDetailsPanel.add(lblAccountNumber);
	
	accountNumberText = new JTextField();
	accountNumberText.setEditable(false);
	accountNumberText.setBounds(200, 95, 300, 20);
	customerDetailsPanel.add(accountNumberText);
	accountNumberText.setColumns(10);
	
	JPanel lockerDetailsPanel = new JPanel();
	lockerDetailsPanel.setForeground(new Color(0, 0, 0));
	lockerDetailsPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Locker Details", TitledBorder.LEADING, TitledBorder.TOP, null, Color.LIGHT_GRAY));
	lockerDetailsPanel.setBackground(new Color(0, 102, 102));
	lockerDetailsPanel.setBounds(20, 150, 540, 105);
	getContentPane().add(lockerDetailsPanel);
	lockerDetailsPanel.setLayout(null);
	
	JLabel lblNewLabel = new JLabel("Locker Number");
	lblNewLabel.setForeground(Color.WHITE);
	lblNewLabel.setBounds(10, 45, 150, 20);
	lockerDetailsPanel.add(lblNewLabel);
	
	lockerNumberText = new JTextField();
	lockerNumberText.setEditable(false);
	lockerNumberText.setBounds(200, 45, 90, 20);
	lockerDetailsPanel.add(lockerNumberText);
	lockerNumberText.setColumns(10);
	
	JLabel lblNewLabel_1 = new JLabel("Locker Key");
	lblNewLabel_1.setForeground(Color.WHITE);
	lblNewLabel_1.setBounds(300, 20, 80, 20);
	lockerDetailsPanel.add(lblNewLabel_1);
	
	lockerKeyText = new JTextField();
	lockerKeyText.setEditable(false);
	lockerKeyText.setBounds(400, 20, 100, 20);
	lockerDetailsPanel.add(lockerKeyText);
	lockerKeyText.setColumns(10);
	//if user then textfield replace to combobox
	JLabel lblNewLabel_2 = new JLabel("Locker Size");
	lblNewLabel_2.setForeground(Color.WHITE);
	lblNewLabel_2.setBounds(10, 20, 80, 20);
	JComboBox lockerSizeComboBox = new JComboBox();
	lockerSizeComboBox.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			try {
	            JComboBox<String> cb = (JComboBox<String>) e.getSource();
	            String selectedItem = (String) cb.getSelectedItem();
	            System.out.println("Selected item: " + selectedItem);
	            lockerSize=selectedItem;
	            int val=0;
	            if(selectedItem=="Small"){
	            	if(availableLockers.get(0)==3){
	            		 JOptionPane.showMessageDialog(null,"Small Locker Not Available");
	            	}
	            	else{
	            		val=1;
	            		
	            		fetchLockerDetails(val);
	            	}
	            }
	            else if (selectedItem=="Medium"){
	            
	            	if(availableLockers.get(1)==0){
	            		 JOptionPane.showMessageDialog(null,"Medium Locker Not Available");
	            	}
	            	else{
	            		val=2;
	            		fetchLockerDetails(val);
	            	}
	            }
	            else if(selectedItem=="Large"){
	            	
	            	if(availableLockers.get(2)==0){
	            		 JOptionPane.showMessageDialog(null,"Large Locker Not Available");
	            	}
	            	else{
	            		val=3;
	            		fetchLockerDetails(val);
	            	}
	            }
			} catch (Exception e2) {
				// TODO: handle exception
			}
		}
	});
	lockerSizeComboBox.setModel(new DefaultComboBoxModel(new String[] {"Small", "Medium", "Large"}));
	lockerSizeComboBox.setSelectedIndex(-1);
	lockerDetailsPanel.add(lblNewLabel_2);
	
//	operatingInstructionText = new JTextField();
//	JComboBox OperatingInstructionComboBox = new JComboBox();
//	OperatingInstructionComboBox.setModel(new DefaultComboBoxModel(new String[] {"Singly", "Either or Surviver", "Jointly by all of Us","Jointly by two of Us", "Others"}));
//	OperatingInstructionComboBox.setSelectedIndex(-1);

	modeOfOperationComboBox = new JComboBox();
	modeOfOperationComboBox.setModel(new DefaultComboBoxModel(new String[] {"Singly", "Either or Surviver", "Jointly by all of Us", "Jointly by two of Us", "Others"}));
	modeOfOperationComboBox.setSelectedIndex(-1);
	modeOfOperationComboBox.setMaximumRowCount(5);
	
	modeOfOperationText = new JTextField();
	lockerSizeText = new JTextField();
	if (chk==1 | chk==3) {

//		operatingInstructionText.setBounds(200, 70, 300, 20);
//		lockerDetailsPanel.add(operatingInstructionText);
//		operatingInstructionText.setColumns(10);
		

		lockerSizeText.setBounds(200, 20, 90, 20);
		lockerDetailsPanel.add(lockerSizeText);
		lockerSizeText.setColumns(10);
		lockerSizeText.setEditable(false);
		modeOfOperationText.setBounds(200, 70, 300, 20);
		lockerDetailsPanel.add(modeOfOperationText);
		modeOfOperationText.setColumns(10);
	}
	else if(chk==0){
//		OperatingInstructionComboBox.setBounds(200, 67, 300, 22);
//		lockerDetailsPanel.add(OperatingInstructionComboBox);
		lockerSizeComboBox.setBounds(200, 20, 90, 20);
		lockerDetailsPanel.add(lockerSizeComboBox);
		modeOfOperationComboBox.setBounds(200, 70, 300, 20);
		lockerDetailsPanel.add(modeOfOperationComboBox);
//		OperatingInstructionComboBox.addActionListener(new ActionListener() {
//			public void actionPerformed(ActionEvent e) {
//			});
		modeOfOperationComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					
				} catch (Exception e2) {
					// TODO: handle exception
				}
			}
			});
	}
	if(chk==1)
	{
		JButton rejectButton = new JButton("Reject");
	    rejectButton.addActionListener(new ActionListener() {
	    	public void actionPerformed(ActionEvent arg0) {
	    		 JPanel panel = new JPanel();
	    	        JTextArea textArea = new JTextArea(5, 20);
	    	        JScrollPane scrollPane = new JScrollPane(textArea);
	    	        panel.add(scrollPane);
	    	        UIManager.put("OptionPane.background", new ColorUIResource(0, 102, 102));
			        UIManager.put("Panel.background", new ColorUIResource(0, 102, 102));
	    	        Object[] options = { "Reject", "Cancel" };

	    	        // Show the confirm dialog with custom button labels
	    	        int result = JOptionPane.showOptionDialog(null, panel, "Enter Comments", JOptionPane.OK_CANCEL_OPTION,
	    	                JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
	    	        // Check if the user clicked the OK button
	    	        if (result == JOptionPane.OK_OPTION) {
	    	            String comment = textArea.getText();
	    	            try {

							Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
							java.sql.Connection connection = null;
							java.sql.Statement  lcl_stmt =null;
							connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
							
							PreparedStatement statement = connection.prepareStatement("select * from lockerassigned_tr where LOCKERNUM=?");
						
							statement.setString(1,lockerNumber);
							
						
							ResultSet result2 = statement.executeQuery();
							System.out.println("DB successful");
								if (result2.next()) {
									int ASSIGNEDID = result2.getInt("ASSIGNEDID");
					                int VOUCHERID = result2.getInt("VOUCHERID");
					                int CUSTOMERID = result2.getInt("CUSTOMERID");
					                int DEPOSITAMOUNT = result2.getInt("DEPOSITAMOUNT");
					                String OVERDUE = result2.getString("OVERDUE");
					                String LASTRECOVERDATE = result2.getString("LASTRECOVERDATE");
					                int RENTSTATUS = result2.getInt("RENTSTATUS");
					                String ASSIGNEDDATE = result2.getString("ASSIGNEDDATE");
					                String COMMENTS = result2.getString("COMMENTS");
					                int NOTIFYUSER = result2.getInt("NOTIFYUSER");
					                String LOCKERNUM = result2.getString("LOCKERNUM");
					                String insertQuery="";
					                String deleteQuery="DELETE FROM lockerassigned_tr WHERE LOCKERNUM=?";
					                String deleteTl= "DELETE FROM lockerassigned_tl WHERE LOCKERNUM=?";
					                
					                System.out.println("next");
					                //Insert
					                	SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
					                    Date currentDate = new Date(System.currentTimeMillis());
						                ASSIGNEDDATE=formatter.format(currentDate);
						                System.out.println(ASSIGNEDDATE);
						                 insertQuery = "INSERT INTO lockerassigned_tl (ASSIGNEDID, VOUCHERID,CUSTOMERID,DEPOSITAMOUNT," +
						                "OVERDUE,LASTRECOVERDATE,RENTSTATUS,ASSIGNEDDATE,COMMENTS,NOTIFYUSER,LOCKERNUM) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
						                
						        
						                	  insertQuery = "INSERT INTO lockerassigned_ht (ASSIGNEDID, VOUCHERID,CUSTOMERID,DEPOSITAMOUNT," +
										     "OVERDUE,LASTRECOVERDATE,RENTSTATUS,ASSIGNEDDATE,COMMENTS,NOTIFYUSER,LOCKERNUM) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
										}
					                
					                PreparedStatement insertStatement = connection.prepareStatement(insertQuery);
					                insertStatement.setInt(1, ASSIGNEDID);
					                insertStatement.setInt(2, VOUCHERID);
					                insertStatement.setInt(3, CUSTOMERID);
					                insertStatement.setInt(4, DEPOSITAMOUNT);
					                insertStatement.setString(5, OVERDUE);
					                insertStatement.setString(6, LASTRECOVERDATE);
					                insertStatement.setInt(7, RENTSTATUS);
					                insertStatement.setString(8, ASSIGNEDDATE);
					                insertStatement.setString(9, COMMENTS);
					                insertStatement.setInt(10, NOTIFYUSER);
					                insertStatement.setString(11, LOCKERNUM);
					                // Set other column values as needed

					                int res=insertStatement.executeUpdate();
					                System.out.println("next");
					                System.out.println(res);
					                if(res>0){
					                	
					                	System.out.println("new");
					                	System.out.println(res);

					                	if(RENTSTATUS==1)
					                	{
					                		PreparedStatement delete = connection.prepareStatement(deleteTl);
					                		delete.setString(1, lockerNumber);
					                		delete.execute();
					                	}
	            		                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
	            		                deleteStatement.setString(1, lockerNumber);
	            		                deleteStatement.execute();
					                	System.out.println("delete");
					                	
					                }
					                
					                result.close();
					                statement.close();
					                connection.close();
					       
					                System.out.println("Row inserted successfully!");
					                JOptionPane.showMessageDialog(null, "Authorize");
					                
								}
					
							if (rowsUpdated!=0) {
								UIManager.put("OptionPane.background", new ColorUIResource(255, 255, 255));
								UIManager.put("Panel.background", new ColorUIResource(255, 255, 255));
					            JOptionPane.showMessageDialog(null, "<html>Your Comment:<br>" + comment + "<br>send to User</html>");
							}
						} catch (Exception e) {
							// TODO: handle exception
							System.out.print(e.getMessage());
						}
	    	            newMainMenu obj = new newMainMenu(1);
	    		    	obj.setSize(600, 500);
	    		    	obj.setVisible(true);
	    		    	dispose();
	    	        } else if (result == JOptionPane.CANCEL_OPTION) {
	    	            // Close the JOptionPane
	    	            System.exit(0);
	    	        }
	    	}
	    });
	    rejectButton.setBounds(20, 410, 90, 30);
	    getContentPane().add(rejectButton);
	    
	    JButton referBackButton = new JButton("Refer Back");
	    referBackButton.addActionListener(new ActionListener() {
	    	public void actionPerformed(ActionEvent arg0) {
	   		 JPanel panel = new JPanel();
		        JTextArea textArea = new JTextArea(5, 20);
		        JScrollPane scrollPane = new JScrollPane(textArea);
		        panel.add(scrollPane);
		        UIManager.put("OptionPane.background", new ColorUIResource(0, 102, 102));
		        UIManager.put("Panel.background", new ColorUIResource(0, 102, 102));
		        // Set the background color of the pop-up box
		        Object[] options = { "Refer Back", "Cancel" };

		        // Show the confirm dialog with custom button labels
		        int result = JOptionPane.showOptionDialog(null, panel, "Enter Comments", JOptionPane.OK_CANCEL_OPTION,
		                JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
		        
		        // Check if the user clicked the OK button
		        if (result == JOptionPane.OK_OPTION) {
			            String comment = textArea.getText();

				            try {
				            	Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
								java.sql.Connection connection = null;
								java.sql.Statement  lcl_stmt =null;
								connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
								
								PreparedStatement statement = connection.prepareStatement("UPDATE lockerassigned_tr SET COMMENTS = ?, NOTIFYUSER = ? WHERE LOCKERNUM = ? ;");				
								statement.setString(1,comment);
								statement.setInt(2,1);
								statement.setString(3,lockerNumber);
								
								int rowsUpdated = statement.executeUpdate();
								System.out.print(comment);
								if (rowsUpdated!=0) {
									UIManager.put("OptionPane.background", new ColorUIResource(255, 255, 255));
									UIManager.put("Panel.background", new ColorUIResource(255, 255, 255));
						            JOptionPane.showMessageDialog(null, "<html>Your Comment:<br>" + comment + "<br>send to User</html>");
								}
							} catch (Exception e) {
								// TODO: handle exception
								System.out.print(e.getMessage());
							}
			            newMainMenu obj = new newMainMenu(1);
				    	obj.setSize(600, 500);
				    	obj.setVisible(true);
				    	dispose();
		        } else if (result == JOptionPane.CANCEL_OPTION) {
		            // Close the JOptionPane
		            System.exit(0);
		        }
		}
	    });
	    referBackButton.setBounds(120, 410, 100, 30);
	    getContentPane().add(referBackButton);

	}
	
	JLabel lblLockerStatus = new JLabel("Rent Status");
	lblLockerStatus.setForeground(Color.WHITE);
	lblLockerStatus.setBounds(300, 45, 80, 20);
	lockerDetailsPanel.add(lblLockerStatus);
	
	rentStatusText = new JTextField();
	rentStatusText.setEditable(false);
	rentStatusText.setBounds(400, 45, 100, 20);
	lockerDetailsPanel.add(rentStatusText);
	rentStatusText.setColumns(10);
	
	JLabel lblNewLabel_9 = new JLabel("Mode Of Operation");
	lblNewLabel_9.setForeground(Color.WHITE);
	lblNewLabel_9.setBounds(10, 70, 120, 20);
	lockerDetailsPanel.add(lblNewLabel_9);
	
	DepositDetailsPanel.setForeground(new Color(0, 0, 0));
	DepositDetailsPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Rent & Security Deposit Details", TitledBorder.LEADING, TitledBorder.TOP, null, Color.LIGHT_GRAY));
	DepositDetailsPanel.setBackground(new Color(0, 102, 102));
	DepositDetailsPanel.setBounds(20, 265, 540, 100);
	// DepositDetailsPanel.setBounds(20, 290, 540, 125);
	getContentPane().add(DepositDetailsPanel);
	DepositDetailsPanel.setLayout(null);
	final JLabel lbldateFormat = new JLabel("Date format: dd/MM/yyyy");
	JLabel lblNewLabel_4 = new JLabel("Mode Of Payment");
	lblNewLabel_4.setForeground(Color.WHITE);
	lblNewLabel_4.setBounds(10, 20, 120, 20);
	DepositDetailsPanel.add(lblNewLabel_4);

	lblExpiryDate.setForeground(Color.WHITE);
	depositText = new JTextField();
	depositText.setBounds(200, 45, 90, 20);
	DepositDetailsPanel.add(depositText);
	depositText.setColumns(10);
	
	JLabel lblNewLabel_6 = new JLabel("Overdue Date");
	lblNewLabel_6.setForeground(Color.WHITE);
	lblNewLabel_6.setBounds(300, 45, 80, 20);
	DepositDetailsPanel.add(lblNewLabel_6);
	
	overdueDateText = new JTextField();
	overdueDateText.setBounds(400, 45, 100, 20);
	DepositDetailsPanel.add(overdueDateText);
	overdueDateText.setColumns(10);
	
	JLabel lblNewLabel_7 = new JLabel("Last Rent Recover Date");
	lblNewLabel_7.setForeground(Color.WHITE);
	lblNewLabel_7.setBounds(10, 70, 150, 20);
	DepositDetailsPanel.add(lblNewLabel_7);
	
	recoverDateText = new JTextField();
	recoverDateText.setBounds(200, 70, 90, 20);
	DepositDetailsPanel.add(recoverDateText);
	recoverDateText.setColumns(10);
	
	////

	//Mode of Payment
	if(chk==0 | chk==2)
	{
				JComboBox modeOfPaymentComboBox = new JComboBox();
				modeOfPaymentComboBox.addActionListener(new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								try {
									
					            JComboBox<String> cb = (JComboBox<String>) e.getSource();
					            String selectedItem = (String) cb.getSelectedItem();
					            System.out.println("Selected item: " + selectedItem);
					            paymentMode=selectedItem;
					            
					            int val=0;
					            if(selectedItem=="Complementary"){
					            	// Set the new bounds here
					            		DepositDetailsPanel.setBounds(20, 265, 540, 125);
					            		lblExpiryDate.setBounds(10, 95, 150, 20);
					            		lblExpiryDate.setForeground(Color.WHITE);
					            		DepositDetailsPanel.add(lblExpiryDate);
					                   	lblExpiryDate.setVisible(true);
					            		expiryDateText = new JTextField();
					            		expiryDateText.setBounds(200, 95, 90, 20);
					                    expiryDateText.setVisible(true);
					            		DepositDetailsPanel.add(expiryDateText);
					            		expiryDateText.setColumns(10);
					            		
//					            		lbldateFormat = new JLabel()
					            		lbldateFormat.setBounds(300, 95, 150, 20);
					            		lbldateFormat.setForeground(new Color(0, 0, 0));					            		
					            		DepositDetailsPanel.add(lbldateFormat);
					            		lbldateFormat.setForeground(Color.WHITE);
					            		lbldateFormat.setVisible(true);
					            		lbldateFormat.setEnabled(false);
					            		
					            		expiryDateText.addFocusListener(new FocusAdapter() {
					            			@Override
					            			public void focusLost(FocusEvent e) {
					            				
					            				
					            				///
					            				String text=expiryDateText.getText();
					            				System.out.print(text);
					            				boolean ans=formatDate(text);
					            				if(!ans){
					            					JOptionPane.showMessageDialog(null,"Invalid Date");
					            				}
					            				
					            			}
					            		});
					                 // Repaint the panel to reflect changes
						                 DepositDetailsPanel.revalidate();
						                 DepositDetailsPanel.repaint();
					            	
					            }
					            else if (selectedItem=="Security Deposit" || selectedItem=="Yearly Rent"){
					            	DepositDetailsPanel.setBounds(20, 265, 540, 100);
					            	DepositDetailsPanel.revalidate();
					                DepositDetailsPanel.repaint();
					                expiryDateText.setVisible(false);
					            	lblExpiryDate.setVisible(false);
					            	lbldateFormat.setVisible(false);
					            	
					            }
								} catch (Exception e2) {
									// TODO: handle exception
								}
							}
							});

					modeOfPaymentComboBox.setMaximumRowCount(3);
					modeOfPaymentComboBox.setModel(new DefaultComboBoxModel(new String[] {"Complementary", "Security Deposit", "Yearly Rent"}));
					modeOfPaymentComboBox.setSelectedIndex(-1);
					modeOfPaymentComboBox.setBounds(200, 20, 300, 20);
					DepositDetailsPanel.add(modeOfPaymentComboBox);
				}
				else if(chk==1 | chk==3)
				{
					modeOfPaymentText = new JTextField();
					modeOfPaymentText.setBounds(200, 20, 300, 20);
					DepositDetailsPanel.add(modeOfPaymentText);
					modeOfPaymentText.setColumns(10);	
					customerNameText.setEditable(false);
					correspondedAddressText.setEditable(false);
					mobileNumberText.setEditable(false);
					accountNumberText.setEditable(false);
					lockerSizeText.setEditable(false);
					lockerKeyText.setEditable(false);
					lockerNumberText.setEditable(false);
					rentStatusText.setEditable(false);
//					operatingInstructionText.setEditable(false);
					modeOfOperationText.setEditable(false);
					modeOfPaymentText.setEditable(false);
					depositText.setEditable(false);
					overdueDateText.setEditable(false);
					recoverDateText.setEditable(false);

				}
				if(chk==2)
				{
					lockerSizeText.setBounds(200, 20, 90, 20);
					lockerDetailsPanel.add(lockerSizeText);
					lockerSizeText.setColumns(10);
					lockerSizeText.setEnabled(false);

//					operatingInstructionText.setEditable(true);
					depositText.setEditable(true);
					overdueDateText.setEditable(true);
					recoverDateText.setEditable(true);
					modeOfOperationComboBox.setBounds(200, 70, 300, 20);
					lockerDetailsPanel.add(modeOfOperationComboBox);
//					OperatingInstructionComboBox.addActionListener(new ActionListener() {
//						public void actionPerformed(ActionEvent e) {
//						});
					modeOfOperationComboBox.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) {
					
						}
						});
				}
	JLabel lblNewLabel_5 = new JLabel("Rent/Security Deposit");
	lblNewLabel_5.setForeground(Color.WHITE);
	lblNewLabel_5.setBounds(10, 45, 150, 20);
	DepositDetailsPanel.add(lblNewLabel_5);
	
	
	JButton backButton = new JButton("Back");
	backButton.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			if (chk==0) {
				newLockerIssuance obj=new newLockerIssuance(0);
				obj.setVisible(true);
				obj.setSize(600, 500);
				dispose();
			}else if(chk==1){
				newGrid obj=new newGrid(1);
				obj.setVisible(true);
				obj.setSize(600, 500);
				dispose();
			}
			else if(chk==2){
				newLockerMaintenance obj=new newLockerMaintenance(2);
				obj.setVisible(true);
				obj.setSize(600, 500);
				dispose();
			}
			else if(chk==3){
				newLockerMaintenance obj=new newLockerMaintenance(3);
				obj.setVisible(true);
				obj.setSize(600, 500);
				dispose();
			}
			
			
		}
	});
	backButton.setBounds(370, 410, 90, 30);
	getContentPane().add(backButton);
	
	JButton signOffButton = new JButton("Sign Off");
	signOffButton.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent arg0) {
			newLogIn obj=new newLogIn();
			obj.setVisible(true);
			obj.setSize(600, 500);
			dispose();
		}
	});
	signOffButton.setBounds(470, 410, 90, 30);
	getContentPane().add(signOffButton);
//date
	newMainMenu date = new newMainMenu(1);
    JLabel dateLabel = new JLabel(date.getCurrentDate());
    dateLabel.setForeground(Color.WHITE);
    dateLabel.setHorizontalAlignment(SwingConstants.LEFT);
    dateLabel.setVerticalAlignment(SwingConstants.BOTTOM);
    dateLabel.setBounds(10, 440, 570, 20);
    getContentPane().add(dateLabel);
    
    JButton saveButton = new JButton(chk==1 ? "Authorize" : chk==2 ? "Update": chk==3 ? "Surrender": "Save");
    saveButton.addActionListener(new ActionListener() {
    	public void actionPerformed(ActionEvent arg0) {
    		if(chk==0)
    		{
    			//user query 
    			
	            JOptionPane.showMessageDialog(null, "Save");
    		}else if(chk==1){
				//authorizer
    			try {
						Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
						java.sql.Connection connection = null;
						java.sql.Statement  lcl_stmt =null;
						connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
						
						PreparedStatement statement = connection.prepareStatement("select * from lockerassigned_tr where LOCKERNUM=?");
					
						statement.setString(1,lockerNumber);
						
					
						ResultSet result = statement.executeQuery();
						System.out.println("DB successful");
							if (result.next()) {
								int ASSIGNEDID = result.getInt("ASSIGNEDID");
				                int VOUCHERID = result.getInt("VOUCHERID");
				                int CUSTOMERID = result.getInt("CUSTOMERID");
				                int DEPOSITAMOUNT = result.getInt("DEPOSITAMOUNT");
				                String OVERDUE = result.getString("OVERDUE");
				                String LASTRECOVERDATE = result.getString("LASTRECOVERDATE");
				                int RENTSTATUS = result.getInt("RENTSTATUS");
				                String ASSIGNEDDATE = result.getString("ASSIGNEDDATE");
				                String COMMENTS = result.getString("COMMENTS");
				                int NOTIFYUSER = result.getInt("NOTIFYUSER");
				                String LOCKERNUM = result.getString("LOCKERNUM");
				                String insertQuery="";
				                String deleteQuery="DELETE FROM lockerassigned_tr WHERE LOCKERNUM=?";
				                String deleteTl= "DELETE FROM lockerassigned_tl WHERE LOCKERNUM=?";
				                
				                System.out.println("next");
				                //Insert
				                if(RENTSTATUS==0)
				                {
				                	SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
				                    Date currentDate = new Date(System.currentTimeMillis());
					                ASSIGNEDDATE=formatter.format(currentDate);
					                System.out.println(ASSIGNEDDATE);
					                 insertQuery = "INSERT INTO lockerassigned_tl (ASSIGNEDID, VOUCHERID,CUSTOMERID,DEPOSITAMOUNT," +
					                "OVERDUE,LASTRECOVERDATE,RENTSTATUS,ASSIGNEDDATE,COMMENTS,NOTIFYUSER,LOCKERNUM) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
					                
					                }
					                else if(RENTSTATUS==1)
					                {
					                	  insertQuery = "INSERT INTO lockerassigned_ht (ASSIGNEDID, VOUCHERID,CUSTOMERID,DEPOSITAMOUNT," +
									     "OVERDUE,LASTRECOVERDATE,RENTSTATUS,ASSIGNEDDATE,COMMENTS,NOTIFYUSER,LOCKERNUM) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
									}
				                
				                PreparedStatement insertStatement = connection.prepareStatement(insertQuery);
				                insertStatement.setInt(1, ASSIGNEDID);
				                insertStatement.setInt(2, VOUCHERID);
				                insertStatement.setInt(3, CUSTOMERID);
				                insertStatement.setInt(4, DEPOSITAMOUNT);
				                insertStatement.setString(5, OVERDUE);
				                insertStatement.setString(6, LASTRECOVERDATE);
				                insertStatement.setInt(7, RENTSTATUS);
				                insertStatement.setString(8, ASSIGNEDDATE);
				                insertStatement.setString(9, COMMENTS);
				                insertStatement.setInt(10, NOTIFYUSER);
				                insertStatement.setString(11, LOCKERNUM);
				                // Set other column values as needed

				                int res=insertStatement.executeUpdate();
				                System.out.println("next");
				                System.out.println(res);
				                if(res>0){
				                	
				                	System.out.println("new");
				                	System.out.println(res);

				                	if(RENTSTATUS==1)
				                	{
				                		PreparedStatement delete = connection.prepareStatement(deleteTl);
				                		delete.setString(1, lockerNumber);
				                		delete.execute();
				                	}
            		                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
            		                deleteStatement.setString(1, lockerNumber);
            		                deleteStatement.execute();
				                	System.out.println("delete");
				                	
				                }
				                
				                result.close();
				                statement.close();
				                connection.close();
				       
				                System.out.println("Row inserted successfully!");
				                JOptionPane.showMessageDialog(null, "Authorize");
				                
							}
				} catch (Exception e) {
					// TODO: handle exception
					System.out.println(e.getMessage());
//					e.printStackTrace();
				}
//    			try {
//					Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
//					java.sql.Connection connection = null;
//					java.sql.Statement  lcl_stmt =null;
//					connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
//					String deleteQuery = "DELETE FROM lockerassigned_tr WHERE LOCKERNUM=?";
//
//	                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);
//	                deleteStatement.executeUpdate();
//	                deleteStatement.close();
//	                connection.close();
//					
//				} catch (Exception e) {
//					// TODO: handle exception
//					System.out.println("connection fail! FOR DELETE QUERY");
//				}
			}else if(chk==2){
				//authorizer
    			
	            JOptionPane.showMessageDialog(null, "Maintenance");
			}else if(chk==3){
				//authorizer
    			
	            JOptionPane.showMessageDialog(null, "Surrender");
			}
    	}
    });
    saveButton.setBounds(260, 410, 100, 30);
    getContentPane().add(saveButton);
    
    }
	
	// functions declarations
	public boolean formatDate(String inp){
		Scanner scanner = new Scanner(System.in);
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        sdf.setLenient(false); // Set lenient property to false
        try {
            java.util.Date date = sdf.parse(inp);
            int month = date.getMonth() + 1; // Extract month value
            if (month > 12) {
            	JOptionPane.showMessageDialog(null,"Invalid Month");
                System.out.println("Invalid month. Please enter a month between 1 and 12.");
                return false;
            }
            System.out.println("The date you entered is: "+ sdf.format(date));
  //          System.out.println("The date you entered is: " +  new Date());
            Date currentDate = new Date();
            return !date.before(currentDate);
        } catch (ParseException e) {
            System.out.println("Invalid date format. Please try again.");
            return false;
        }
	}
	
	
	public static boolean validateDate(String dateString) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        dateFormat.setLenient(false); // Disallow lenient parsing

        try {
            Date date = dateFormat.parse(dateString);
            Date currentDate = new Date(); // Get the current date
//            System.out.println(date);
//            System.out.println(currentDate);
            System.out.println("The date you entered is: " + date.getDate()+"  "+ date.getMonth()+ "  "+date.getYear());
            return !date.before(currentDate); // Check if the date is not before the current date
        } catch (ParseException e) {
        	System.out.println(e.getMessage());
            return false; // Invalid date format
        }
    }
	
	
	
	public void insertData(HashMap<String,String> custAccRelation ){
		
//		this.accountNum=custAccRelation.get("accountnum");
//		this.branchcodeid=custAccRelation.get("branchcodeid");
//		customerNameText.setText(custAccRelation.get("customername"));
//		contactInformationText.setText(custAccRelation.get("contactno"));
//		emailText.setText(custAccRelation.get("email"));
//		customerNameText.setEditable(false);
//		contactInformationText.setEditable(false);
//		emailText.setEditable(false);
//		titleOfAccountText.setText(custAccRelation.get("accounttitle"));
//		operatingInstructionText.setText(custAccRelation.get("operatinginstruction"));
////		openInBranchText.setText(custAccRelation.get("branchcode"));
//		titleOfAccountText.setEditable(false);
//		operatingInstructionText.setEditable(false);
////		openInBranchText.setEditable(false);
	}
//	
//	
//	
//	public void insertArray(ArrayList<Integer> arr){
//		availableLockers=arr;
//	}
	
	
	
	public void fetchLockerDetails(int val){
		try{
			lockerSizeId=val;
			Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
			java.sql.Connection connection = null;
			java.sql.Statement  lcl_stmt =null;
			connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
						
			String query="select l.lockersizeid,l.lockersize,c.charges, s.secdeposit from lockersize l,lockercharges c,lockersecuritydeposit s where l.lockerchargesid=c.lockerchargesid and l.secdepositid=s.secdepositid and l.lockersizeid=?;";
			PreparedStatement statement = connection.prepareStatement(query);
			
			statement.setInt(1, val);
			
			ResultSet result = statement.executeQuery();
			
			if (result.next()) {
//			    String secDeposit = result.getString("SECDEPOSIT");
//			    Integer charges= result.getInt("CHARGES");
//			    
//			   securityDepositText.setEnabled(true);
//			   yearlyRentText.setEnabled(true);
//			   
//			   securityDepositText.setText(secDeposit);
//			   yearlyRentText.setText(Integer.toString(charges));
//			    		
//			     	 
//			   securityDepositLabel.setEnabled(true);
//			   yearlyRentLabel.setEnabled(true);
//			    
//			   
			}
			
		}
		catch(Exception e){
			System.out.println(e.getMessage());
			 JOptionPane.showMessageDialog(null,"DB Connection Failed");
		}
	
	}

	// customer Details fetching function
	public void getCustDetails(String lockerNumber){
			
			try{
				
				Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
				java.sql.Connection connection = null;
				java.sql.Statement  lcl_stmt =null;
				connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
							
				String query="select c.customerid,c.customername,c.email, c.contactno  from Accountnew a, customerAccountRelationship r, customer c where a.accountNum=r.accountNum and r.customerId=c.customerid and a.accountNum=?;";
				PreparedStatement statement = connection.prepareStatement(query);
				
				statement.setString(1, lockerNumber);
				
				ResultSet result = statement.executeQuery();
				
				String queryAccount="select  a.accountNum,a.accounttitle, a.branchCode, o.operatinginstruction from accountnew a,operatinginstruction o where a.operatinginstructionid=o.operatinginstructionid  and accountnum=?;";
				PreparedStatement statementAccount = connection.prepareStatement(queryAccount);
				
				statementAccount.setString(1, lockerNumber);
				
				ResultSet resultAccount = statementAccount.executeQuery();
				
				HashMap<String, String> customerAccountRelationship = new HashMap<String, String>();
				if(resultAccount.next()){
					customerAccountRelationship.put("accounttitle",resultAccount.getString("ACCOUNTTITLE")) ;
					Global.accountNum(resultAccount.getString("ACCOUNTNUM"));
					int branchCode=resultAccount.getInt("BRANCHCODE");
					if(branchCode==1001){
						customerAccountRelationship.put("branchcode","No - Digital Account") ;
					}
					else{
						customerAccountRelationship.put("branchcode","Yes - "+ Integer.toString(resultAccount.getInt("BRANCHCODE"))) ;
					}
					customerAccountRelationship.put("branchcodeid",Integer.toString(resultAccount.getInt("BRANCHCODE"))) ;
					customerAccountRelationship.put("operatinginstruction", resultAccount.getString("OPERATINGINSTRUCTION")) ;
					customerAccountRelationship.put("accountnum", resultAccount.getString("ACCOUNTNUM")) ;
	
				}
				
				
				
				if (result.next()) {
					customerAccountRelationship.put("customername",result.getString("CUSTOMERNAME")) ;
					customerAccountRelationship.put("contactno",result.getString("CONTACTNO")) ;
					customerAccountRelationship.put("email", result.getString("EMAIL")) ;
					Global.customerId= result.getInt("customerid");
				    customerDetails obj= new customerDetails(0);
				    	obj.insertData(customerAccountRelationship);
				    	obj.insertArray(availableLockers);
						obj.setVisible(true);
						obj.setSize(600,500);
						dispose();
				  
				   
				}
				else{
					 JOptionPane.showMessageDialog(null,"Customer Details Not Found");
				}
			}
			catch(Exception e){
				JOptionPane.showMessageDialog(null,"Could not connect to DB");
				System.out.println(e);
			}
			
			
			
	}
	public void fetchDetails()
	{
		try {
		Class.forName("COM.ibm.db2.jdbc.app.DB2Driver");
		java.sql.Connection connection = null;
		java.sql.Statement  lcl_stmt =null;
		connection = java.sql.DriverManager.getConnection("jdbc:db2:WA27389", "db2admin", "admin123/?");
		
		PreparedStatement statement = connection.prepareStatement("select temp.customername,temp.email, temp.contactno,temp.accountNum,temp.lockerno,temp.lockersizeid,temp.keynum, temp.rentstatus,temp.depositamount,temp.overdue, temp.lastrecoverdate, p.modeofpayment,p.expiry_date, o.modeofoperation from modeofpayment p,("
				+ "select *,tr.lockernum as lockerno  from lockerAssigned_tr tr, locker l,customer c, voucher_master_tl v where tr.lockernum=l.lockernum and tr.voucherid=v.voucherid and tr.customerid=c.customerid and tr.lockernum=?) temp"
				+ ", modeofoperation o where temp.modeofoperationid=o.modeofoperationid and temp.modeofpaymentid=p.modeofpaymentid;");
	
		statement.setString(1,lockerNumber);
		ResultSet result = statement.executeQuery();
		System.out.println("After Execution");
		
		if (result.next()) {
//			System.out.println(result.getString("AUTH"));
//			Global.userId=result.getInt("USERID");
			customerNameText.setText(result.getString("CUSTOMERNAME"));
			correspondedAddressText.setText(result.getString("EMAIL"));
			mobileNumberText.setText(result.getString("CONTACTNO"));
			
			accountNumberText.setText(result.getString("ACCOUNTNUM"));
			
			lockerSizeText.setText(lockerSizeName.get(result.getInt("LOCKERSIZEID")));
			
			lockerKeyText.setText(result.getString("KEYNUM"));
			
			rentStatusText.setText(rentStatus.get(result.getInt("RENTSTATUS")));
			lockerNumberText.setText(result.getString("LOCKERNO"));
			
			modeOfOperationText.setText(result.getString("MODEOFOPERATION"));
			
			modeOfPaymentText.setText(result.getString("MODEOFPAYMENT"));
//			depositText.setText(result.getString("DEPOSITAMOUNT"));
			
			overdueDateText.setText(result.getString("OVERDUE"));
			depositText.setText(Integer.toString(result.getInt("DEPOSITAMOUNT")));
			recoverDateText.setText(result.getString("LASTRECOVERDATE"));
			
			if(result.getString("MODEOFOPERATION").equals("Complementary")) {
//				expiryTextField = new JTextField();
//				expiryTextField.setBounds(400, 70, 100, 20);
//				DepositDetailsPanel.add(expiryTextField);
//				expiryTextField.setColumns(10);
//				expiryTextField.setText(result.getString("EXPIRY_DATE"));
//				expiryTextField.setEditable(false);
//				
//				JLabel lblNewLabel_3 = new JLabel("Expiry");
//				lblNewLabel_3.setForeground(new Color(255, 255, 255));
//				lblNewLabel_3.setBounds(300, 73, 56, 14);
//				DepositDetailsPanel.add(lblNewLabel_3);
				
				
				
				DepositDetailsPanel.setBounds(210, 265, 540, 125);
        		lblExpiryDate.setBounds(10, 95, 150, 20);
        		lblExpiryDate.setForeground(Color.WHITE);
        		DepositDetailsPanel.add(lblExpiryDate);
               	lblExpiryDate.setVisible(true);
        		expiryDateText = new JTextField();
        		expiryDateText.setBounds(200, 95, 90, 20);
                expiryDateText.setVisible(true);
        		DepositDetailsPanel.add(expiryDateText);
        		expiryDateText.setColumns(10);
        		
        		
        		
				
				
//        		DepositDetailsPanel.add(expiryTextField);
//        		
//        		DepositDetailsPanel.setForeground(new Color(0, 0, 0));
//        		DepositDetailsPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Rent & Security Deposit Details", TitledBorder.LEADING, TitledBorder.TOP, null, Color.LIGHT_GRAY));
//        		DepositDetailsPanel.setBackground(new Color(0, 102, 102));
//        		DepositDetailsPanel.setBounds(20, 265, 540, 100);
//        		 DepositDetailsPanel.revalidate();
//                 DepositDetailsPanel.repaint();
                 
			}
		
		}
		else
		{
			JOptionPane.showMessageDialog(null,"Locker Number Not Found");
		}
		
	} catch (Exception e) {
		System.out.println(e.getMessage());
		// TODO: handle exception
		System.out.println("DB Connection fail");
		JOptionPane.showMessageDialog(null,"DB Connection Failed");
	}
	}
	 public static void main(String[] args) {
		 newDetails frame = new newDetails(1,"A120");
	    	frame.setSize(600, 500);
	    	frame.setVisible(true);
	    	
	    }
}


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationStatement(ASTConverter.java:3030)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleLocalDeclaration(ASTConverter.java:400)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:532)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:135)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:114)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.jdt.ui 4 2 2023-12-28 12:24:43.293
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationStatement(ASTConverter.java:3030)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleLocalDeclaration(ASTConverter.java:400)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:532)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:135)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:114)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.jdt.ui 4 0 2023-12-28 12:24:43.293
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationStatement(ASTConverter.java:3030)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleLocalDeclaration(ASTConverter.java:400)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:532)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:322)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2284)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2451)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:534)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2656)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1219)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:135)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:114)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-28 12:40:05.947
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for Image {key=Ljava/awt/Image;} [in Image.class [in java.awt [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-28 12:40:05.947
!MESSAGE Unknown javadoc format for Image {key=Ljava/awt/Image;} [in Image.class [in java.awt [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-28 12:51:57.463
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for Color {key=Ljava/awt/Color;} [in Color.class [in java.awt [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-28 12:51:57.463
!MESSAGE Unknown javadoc format for Color {key=Ljava/awt/Color;} [in Color.class [in java.awt [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-28 12:52:59.862
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for JLabel {key=Ljavax/swing/JLabel;} [in JLabel.class [in javax.swing [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-28 12:52:59.862
!MESSAGE Unknown javadoc format for JLabel {key=Ljavax/swing/JLabel;} [in JLabel.class [in javax.swing [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-28 12:53:29.608
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for JPanel {key=Ljavax/swing/JPanel;} [in JPanel.class [in javax.swing [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-28 12:53:29.608
!MESSAGE Unknown javadoc format for JPanel {key=Ljavax/swing/JPanel;} [in JPanel.class [in javax.swing [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-28 12:53:31.842
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for JPanel {key=Ljavax/swing/JPanel;} [in JPanel.class [in javax.swing [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-28 12:53:31.842
!MESSAGE Unknown javadoc format for JPanel {key=Ljavax/swing/JPanel;} [in JPanel.class [in javax.swing [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-28 12:57:19.512
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for String {key=Ljava/lang/String;} [in String.class [in java.lang [in C:\Program Files\IBM\SDP\jdk\jre\bin\compressedrefs\jclSC170\vm.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-28 12:57:19.512
!MESSAGE Unknown javadoc format for String {key=Ljava/lang/String;} [in String.class [in java.lang [in C:\Program Files\IBM\SDP\jdk\jre\bin\compressedrefs\jclSC170\vm.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-28 12:58:10.092
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for HashMap {key=Ljava/util/HashMap<Ljava/lang/Integer;Ljava/lang/String;>;} [in HashMap.class [in java.util [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-28 12:58:10.092
!MESSAGE Unknown javadoc format for HashMap {key=Ljava/util/HashMap<Ljava/lang/Integer;Ljava/lang/String;>;} [in HashMap.class [in java.util [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-28 12:58:21.341
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for JPanel {key=Ljavax/swing/JPanel;} [in JPanel.class [in javax.swing [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-28 12:58:21.341
!MESSAGE Unknown javadoc format for JPanel {key=Ljavax/swing/JPanel;} [in JPanel.class [in javax.swing [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-28 14:01:45.334
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for JOptionPane {key=Ljavax/swing/JOptionPane;} [in JOptionPane.class [in javax.swing [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-28 14:01:45.334
!MESSAGE Unknown javadoc format for JOptionPane {key=Ljavax/swing/JOptionPane;} [in JOptionPane.class [in javax.swing [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-28 14:02:48.203
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for Panel {key=Ljava/awt/Panel;} [in Panel.class [in java.awt [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-28 14:02:48.203
!MESSAGE Unknown javadoc format for Panel {key=Ljava/awt/Panel;} [in Panel.class [in java.awt [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-28 14:47:38.113
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for PreparedStatement {key=Ljava/sql/PreparedStatement;} [in PreparedStatement.class [in java.sql [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-28 14:47:38.113
!MESSAGE Unknown javadoc format for PreparedStatement {key=Ljava/sql/PreparedStatement;} [in PreparedStatement.class [in java.sql [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-28 15:15:49.523
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for PreparedStatement {key=Ljava/sql/PreparedStatement;} [in PreparedStatement.class [in java.sql [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-28 15:15:49.523
!MESSAGE Unknown javadoc format for PreparedStatement {key=Ljava/sql/PreparedStatement;} [in PreparedStatement.class [in java.sql [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-28 15:24:19.643
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for ResultSet [in ResultSet.class [in java.sql [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-28 15:24:19.643
!MESSAGE Unknown javadoc format for ResultSet [in ResultSet.class [in java.sql [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-28 15:25:32.516
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for PreparedStatement {key=Ljava/sql/PreparedStatement;} [in PreparedStatement.class [in java.sql [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-28 15:25:32.516
!MESSAGE Unknown javadoc format for PreparedStatement {key=Ljava/sql/PreparedStatement;} [in PreparedStatement.class [in java.sql [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-28 15:45:26.879
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for PreparedStatement {key=Ljava/sql/PreparedStatement;} [in PreparedStatement.class [in java.sql [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-28 15:45:26.879
!MESSAGE Unknown javadoc format for PreparedStatement {key=Ljava/sql/PreparedStatement;} [in PreparedStatement.class [in java.sql [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-29 09:13:37.931
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for Invalid {key=Lorg/omg/CORBA/DynAnyPackage/Invalid;} [in Invalid.class [in org.omg.CORBA.DynAnyPackage [in C:\Program Files\IBM\SDP\jdk\jre\lib\ibmorbapi.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-29 09:13:37.931
!MESSAGE Unknown javadoc format for Invalid {key=Lorg/omg/CORBA/DynAnyPackage/Invalid;} [in Invalid.class [in org.omg.CORBA.DynAnyPackage [in C:\Program Files\IBM\SDP\jdk\jre\lib\ibmorbapi.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-29 09:27:19.751
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for Color [in Color.class [in java.awt [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-29 09:27:19.751
!MESSAGE Unknown javadoc format for Color [in Color.class [in java.awt [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.e4.ui.workbench 4 0 2023-12-29 09:34:03.372
!MESSAGE Error disposing widget for : org.eclipse.e4.ui.model.application.ui.basic.impl.PartImpl newDetails.java
!STACK 0
org.eclipse.swt.SWTException: Widget is disposed
	at org.eclipse.swt.SWT.error(SWT.java:4361)
	at org.eclipse.swt.SWT.error(SWT.java:4276)
	at org.eclipse.swt.SWT.error(SWT.java:4247)
	at org.eclipse.swt.widgets.Widget.error(Widget.java:468)
	at org.eclipse.swt.widgets.Widget.checkWidget(Widget.java:340)
	at org.eclipse.swt.widgets.Shell.removeShellListener(Shell.java:1343)
	at org.eclipse.wb.internal.core.utils.ui.TabFolderDecorator$3.handleEvent(TabFolderDecorator.java:111)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1077)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1062)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:774)
	at org.eclipse.swt.custom.CTabFolder.onDispose(CTabFolder.java:1543)
	at org.eclipse.swt.custom.CTabFolder$1.handleEvent(CTabFolder.java:272)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1077)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1058)
	at org.eclipse.swt.widgets.Widget.release(Widget.java:808)
	at org.eclipse.swt.widgets.Composite.releaseChildren(Composite.java:873)
	at org.eclipse.swt.widgets.Widget.release(Widget.java:811)
	at org.eclipse.swt.widgets.Composite.releaseChildren(Composite.java:873)
	at org.eclipse.swt.widgets.Widget.release(Widget.java:811)
	at org.eclipse.swt.widgets.Widget.dispose(Widget.java:446)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.disposeWidget(SWTPartRenderer.java:137)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.disposeWidget(ContributedPartRenderer.java:285)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:845)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$3(PartRenderingEngine.java:774)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$8.run(PartRenderingEngine.java:769)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:754)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:806)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$3(PartRenderingEngine.java:774)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$8.run(PartRenderingEngine.java:769)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:754)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:806)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$3(PartRenderingEngine.java:774)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$8.run(PartRenderingEngine.java:769)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:754)
	at org.eclipse.e4.ui.workbench.renderers.swt.ElementReferenceRenderer.disposeWidget(ElementReferenceRenderer.java:122)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:845)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$3(PartRenderingEngine.java:774)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$8.run(PartRenderingEngine.java:769)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:754)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:806)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$3(PartRenderingEngine.java:774)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$8.run(PartRenderingEngine.java:769)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:754)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:799)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$3(PartRenderingEngine.java:774)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$8.run(PartRenderingEngine.java:769)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:754)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:806)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$3(PartRenderingEngine.java:774)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$8.run(PartRenderingEngine.java:769)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:754)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:806)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$3(PartRenderingEngine.java:774)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$8.run(PartRenderingEngine.java:769)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:754)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:806)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$3(PartRenderingEngine.java:774)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$8.run(PartRenderingEngine.java:769)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:754)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:806)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$3(PartRenderingEngine.java:774)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$8.run(PartRenderingEngine.java:769)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:754)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:806)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$3(PartRenderingEngine.java:774)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$8.run(PartRenderingEngine.java:769)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:754)
	at org.eclipse.ui.internal.WorkbenchWindow.hardClose(WorkbenchWindow.java:1519)
	at org.eclipse.ui.internal.WorkbenchWindow.busyClose(WorkbenchWindow.java:1166)
	at org.eclipse.ui.internal.WorkbenchWindow.access$14(WorkbenchWindow.java:1136)
	at org.eclipse.ui.internal.WorkbenchWindow$10.run(WorkbenchWindow.java:1197)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:1195)
	at org.eclipse.ui.internal.Workbench$16.run(Workbench.java:1107)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.Workbench.busyClose(Workbench.java:1090)
	at org.eclipse.ui.internal.Workbench.access$16(Workbench.java:1002)
	at org.eclipse.ui.internal.Workbench$17.run(Workbench.java:1183)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.internal.Workbench.close(Workbench.java:1181)
	at org.eclipse.ui.internal.Workbench.close(Workbench.java:1154)
	at org.eclipse.ui.internal.WorkbenchWindow.busyClose(WorkbenchWindow.java:1162)
	at org.eclipse.ui.internal.WorkbenchWindow.access$14(WorkbenchWindow.java:1136)
	at org.eclipse.ui.internal.WorkbenchWindow$10.run(WorkbenchWindow.java:1197)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:1195)
	at org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:1207)
	at org.eclipse.ui.internal.WorkbenchWindow$6.close(WorkbenchWindow.java:445)
	at org.eclipse.e4.ui.workbench.renderers.swt.WBWRenderer$11.shellClosed(WBWRenderer.java:580)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:98)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1077)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1062)
	at org.eclipse.swt.widgets.Decorations.closeWidget(Decorations.java:309)
	at org.eclipse.swt.widgets.Decorations.WM_CLOSE(Decorations.java:1694)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4530)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2546)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3756)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1053)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:942)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:86)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:588)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:543)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:353)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
	at java.lang.reflect.Method.invoke(Method.java:613)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:629)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:584)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1438)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1414)
!SESSION 2023-12-29 09:36:22.188 -----------------------------------------------
eclipse.buildId=unknown
java.fullversion=JRE 1.7.0 IBM J9 2.6 Windows 8 amd64-64 Compressed References 20130306_140761 (JIT enabled, AOT enabled)
J9VM - R26_Java726_SR4_FP1_20130306_1011_B140761
JIT  - r11.b03_20130131_32403ifx1
GC   - R26_Java726_SR4_FP1_20130306_1011_B140761_CMPRSS
J9CL - 20130306_140761
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product com.ibm.rational.rad.product.v9.ide
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product com.ibm.rational.rad.product.v9.ide

!ENTRY org.eclipse.ui 4 4 2023-12-29 09:36:28.462
!MESSAGE Could not create action delegate for id: org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction

!ENTRY org.eclipse.equinox.registry 4 1 2023-12-29 09:36:28.462
!MESSAGE Plug-in org.eclipse.wb.core.java was unable to load class org.eclipse.debug.ui.actions.RulerToggleBreakpointActionDelegate.
!STACK 0
java.lang.ClassNotFoundException: org.eclipse.debug.ui.actions.RulerToggleBreakpointActionDelegate
	at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:501)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:421)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:412)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:690)
	at org.eclipse.osgi.internal.loader.BundleLoader.loadClass(BundleLoader.java:340)
	at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass(BundleHost.java:229)
	at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass(AbstractBundle.java:1212)
	at org.eclipse.core.internal.registry.osgi.RegistryStrategyOSGI.createExecutableExtension(RegistryStrategyOSGI.java:174)
	at org.eclipse.core.internal.registry.ExtensionRegistry.createExecutableExtension(ExtensionRegistry.java:905)
	at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:243)
	at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:55)
	at org.eclipse.ui.internal.WorkbenchPlugin.createExtension(WorkbenchPlugin.java:264)
	at org.eclipse.ui.internal.PluginAction.createDelegate(PluginAction.java:122)
	at org.eclipse.ui.internal.PluginAction.selectionChanged(PluginAction.java:275)
	at org.eclipse.ui.internal.PluginAction.<init>(PluginAction.java:112)
	at org.eclipse.ui.internal.PartPluginAction.<init>(PartPluginAction.java:29)
	at org.eclipse.ui.internal.EditorPluginAction.<init>(EditorPluginAction.java:32)
	at org.eclipse.ui.internal.ActionDescriptor.createAction(ActionDescriptor.java:262)
	at org.eclipse.ui.internal.ActionDescriptor.<init>(ActionDescriptor.java:176)
	at org.eclipse.ui.internal.ActionDescriptor.<init>(ActionDescriptor.java:103)
	at org.eclipse.ui.internal.EditorActionBuilder.createActionDescriptor(EditorActionBuilder.java:41)
	at org.eclipse.ui.internal.PluginActionBuilder.readElement(PluginActionBuilder.java:161)
	at org.eclipse.ui.internal.registry.RegistryReader.readElements(RegistryReader.java:144)
	at org.eclipse.ui.internal.registry.RegistryReader.readElementChildren(RegistryReader.java:133)
	at org.eclipse.ui.internal.PluginActionBuilder.readElement(PluginActionBuilder.java:144)
	at org.eclipse.ui.internal.registry.RegistryReader.readElements(RegistryReader.java:144)
	at org.eclipse.ui.internal.registry.RegistryReader.readExtension(RegistryReader.java:155)
	at org.eclipse.ui.internal.registry.RegistryReader.readRegistry(RegistryReader.java:176)
	at org.eclipse.ui.internal.PluginActionBuilder.readContributions(PluginActionBuilder.java:115)
	at org.eclipse.ui.internal.EditorActionBuilder.readActionExtensions(EditorActionBuilder.java:58)
	at org.eclipse.ui.internal.EditorReference.createEditorActionBars(EditorReference.java:446)
	at org.eclipse.ui.internal.EditorReference.initialize(EditorReference.java:356)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:301)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
	at java.lang.reflect.Method.invoke(Method.java:613)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:56)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:861)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:841)
	at org.eclipse.e4.core.internal.di.InjectorImpl.inject(InjectorImpl.java:113)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:321)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:242)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:161)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:102)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:71)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:53)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:141)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:894)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:731)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:702)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:696)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:681)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer.showTab(StackRenderer.java:1128)
	at org.eclipse.e4.ui.workbench.renderers.swt.LazyStackRenderer.postProcess(LazyStackRenderer.java:98)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:731)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:702)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:696)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:681)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:59)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:641)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$6.run(PartRenderingEngine.java:520)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:505)
	at org.eclipse.e4.ui.workbench.renderers.swt.ElementReferenceRenderer.createWidget(ElementReferenceRenderer.java:74)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:894)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:731)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:702)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:696)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:681)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:59)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:641)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:731)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:702)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:696)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:681)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:59)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:641)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:731)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:702)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:696)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:681)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:59)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:641)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:731)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:702)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:696)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:681)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:59)
	at org.eclipse.e4.ui.workbench.renderers.swt.PerspectiveRenderer.processContents(PerspectiveRenderer.java:59)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:641)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:731)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:702)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:696)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:681)
	at org.eclipse.e4.ui.workbench.renderers.swt.PerspectiveStackRenderer.showTab(PerspectiveStackRenderer.java:103)
	at org.eclipse.e4.ui.workbench.renderers.swt.LazyStackRenderer.postProcess(LazyStackRenderer.java:98)
	at org.eclipse.e4.ui.workbench.renderers.swt.PerspectiveStackRenderer.postProcess(PerspectiveStackRenderer.java:77)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:645)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:731)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:702)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:696)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:681)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:59)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:641)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:731)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:702)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:696)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:681)
	at org.eclipse.e4.ui.workbench.renderers.swt.SWTPartRenderer.processContents(SWTPartRenderer.java:59)
	at org.eclipse.e4.ui.workbench.renderers.swt.WBWRenderer.processContents(WBWRenderer.java:644)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:641)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:731)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.access$2(PartRenderingEngine.java:702)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$7.run(PartRenderingEngine.java:696)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:681)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:987)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:942)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:86)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:588)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:543)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:353)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
	at java.lang.reflect.Method.invoke(Method.java:613)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:629)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:584)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1438)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1414)

!ENTRY org.eclipse.core.net 1 0 2023-12-29 09:36:29.246
!MESSAGE System property http.proxyHost is set to 10.200.1.18 but should not be set.

!ENTRY org.eclipse.core.net 1 0 2023-12-29 09:36:29.246
!MESSAGE System property http.proxyPort is set to 8080 but should not be set.

!ENTRY org.eclipse.core.net 1 0 2023-12-29 09:36:29.246
!MESSAGE System property http.proxyHost is set to 10.200.1.18 but should not be set.

!ENTRY org.eclipse.core.net 1 0 2023-12-29 09:36:29.246
!MESSAGE System property http.proxyPort is set to 8080 but should not be set.

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-29 10:08:09.253
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for JTextField {key=Ljavax/swing/JTextField;} [in JTextField.class [in javax.swing [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-29 10:08:09.253
!MESSAGE Unknown javadoc format for JTextField {key=Ljavax/swing/JTextField;} [in JTextField.class [in javax.swing [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-29 10:55:24.374
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for PreparedStatement [in PreparedStatement.class [in java.sql [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-29 10:55:24.374
!MESSAGE Unknown javadoc format for PreparedStatement [in PreparedStatement.class [in java.sql [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-29 12:53:30.528
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for ActionListener {key=Ljava/awt/event/ActionListener;} [in ActionListener.class [in java.awt.event [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-29 12:53:30.528
!MESSAGE Unknown javadoc format for ActionListener {key=Ljava/awt/event/ActionListener;} [in ActionListener.class [in java.awt.event [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-29 14:46:13.081
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for String {key=Ljava/lang/String;} [in String.class [in java.lang [in C:\Program Files\IBM\SDP\jdk\jre\bin\compressedrefs\jclSC170\vm.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-29 14:46:13.081
!MESSAGE Unknown javadoc format for String {key=Ljava/lang/String;} [in String.class [in java.lang [in C:\Program Files\IBM\SDP\jdk\jre\bin\compressedrefs\jclSC170\vm.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-29 14:46:13.893
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for String {key=Ljava/lang/String;} [in String.class [in java.lang [in C:\Program Files\IBM\SDP\jdk\jre\bin\compressedrefs\jclSC170\vm.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-29 14:46:13.893
!MESSAGE Unknown javadoc format for String {key=Ljava/lang/String;} [in String.class [in java.lang [in C:\Program Files\IBM\SDP\jdk\jre\bin\compressedrefs\jclSC170\vm.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-29 15:11:30.887
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for AttributeSet {key=Ljavax/swing/text/AttributeSet;} [in AttributeSet.class [in javax.swing.text [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-29 15:11:30.887
!MESSAGE Unknown javadoc format for AttributeSet {key=Ljavax/swing/text/AttributeSet;} [in AttributeSet.class [in javax.swing.text [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-29 15:15:28.737
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for String {key=Ljava/lang/String;} [in String.class [in java.lang [in C:\Program Files\IBM\SDP\jdk\jre\bin\compressedrefs\jclSC170\vm.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-29 15:15:28.737
!MESSAGE Unknown javadoc format for String {key=Ljava/lang/String;} [in String.class [in java.lang [in C:\Program Files\IBM\SDP\jdk\jre\bin\compressedrefs\jclSC170\vm.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-29 15:33:41.452
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for SimpleDateFormat [in SimpleDateFormat.class [in java.text [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-29 15:33:41.452
!MESSAGE Unknown javadoc format for SimpleDateFormat [in SimpleDateFormat.class [in java.text [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-29 15:45:06.049
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for String {key=Ljava/lang/String;} [in String.class [in java.lang [in C:\Program Files\IBM\SDP\jdk\jre\bin\compressedrefs\jclSC170\vm.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-29 15:45:06.049
!MESSAGE Unknown javadoc format for String {key=Ljava/lang/String;} [in String.class [in java.lang [in C:\Program Files\IBM\SDP\jdk\jre\bin\compressedrefs\jclSC170\vm.jar]]]

!ENTRY org.eclipse.jface 4 0 2023-12-29 16:06:18.739
!MESSAGE /icons/structure/palette.png
!STACK 0
java.io.FileNotFoundException: /icons/structure/palette.png
	at org.eclipse.osgi.framework.internal.protocol.bundleentry.Handler.findBundleEntry(Handler.java:44)
	at org.eclipse.osgi.framework.internal.core.BundleResourceHandler.openConnection(BundleResourceHandler.java:175)
	at java.net.URL.openConnection(URL.java:983)
	at org.eclipse.core.internal.boot.PlatformURLConnection.connect(PlatformURLConnection.java:110)
	at org.eclipse.core.internal.boot.PlatformURLConnection.getURLAsLocal(PlatformURLConnection.java:238)
	at org.eclipse.core.internal.runtime.PlatformURLConverter.toFileURL(PlatformURLConverter.java:36)
	at org.eclipse.core.runtime.FileLocator.toFileURL(FileLocator.java:206)
	at org.eclipse.jface.resource.URLImageDescriptor.getFilePath(URLImageDescriptor.java:137)
	at org.eclipse.jface.resource.URLImageDescriptor.createImage(URLImageDescriptor.java:157)
	at org.eclipse.jface.resource.ImageDescriptor.createResource(ImageDescriptor.java:165)
	at org.eclipse.jface.resource.DeviceResourceManager.allocate(DeviceResourceManager.java:56)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.LocalResourceManager.allocate(LocalResourceManager.java:82)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.ResourceManager.createImage(ResourceManager.java:172)
	at org.eclipse.ui.menus.CommandContributionItem.updateIcons(CommandContributionItem.java:923)
	at org.eclipse.ui.menus.CommandContributionItem.fill(CommandContributionItem.java:445)
	at org.eclipse.ui.internal.ShowViewMenu.fill(ShowViewMenu.java:333)
	at org.eclipse.jface.action.MenuManager.doItemFill(MenuManager.java:746)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:827)
	at org.eclipse.jface.action.MenuManager.handleAboutToShow(MenuManager.java:477)
	at org.eclipse.jface.action.MenuManager.access$1(MenuManager.java:470)
	at org.eclipse.jface.action.MenuManager$2.menuShown(MenuManager.java:500)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:255)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1077)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1058)
	at org.eclipse.swt.widgets.Control.WM_INITMENUPOPUP(Control.java:4881)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4557)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2546)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3756)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1053)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:942)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:86)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:588)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:543)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:353)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
	at java.lang.reflect.Method.invoke(Method.java:613)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:629)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:584)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1438)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1414)

!ENTRY org.eclipse.ui 4 0 2023-12-29 16:06:18.739
!MESSAGE Failed to load image
!STACK 0
org.eclipse.jface.resource.DeviceResourceException: Unable to create resource URLImageDescriptor(platform:/plugin/org.eclipse.wb.core.java/icons/structure/palette.png)
	at org.eclipse.jface.resource.ImageDescriptor.createResource(ImageDescriptor.java:167)
	at org.eclipse.jface.resource.DeviceResourceManager.allocate(DeviceResourceManager.java:56)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.LocalResourceManager.allocate(LocalResourceManager.java:82)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.ResourceManager.createImage(ResourceManager.java:172)
	at org.eclipse.ui.menus.CommandContributionItem.updateIcons(CommandContributionItem.java:923)
	at org.eclipse.ui.menus.CommandContributionItem.fill(CommandContributionItem.java:445)
	at org.eclipse.ui.internal.ShowViewMenu.fill(ShowViewMenu.java:333)
	at org.eclipse.jface.action.MenuManager.doItemFill(MenuManager.java:746)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:827)
	at org.eclipse.jface.action.MenuManager.handleAboutToShow(MenuManager.java:477)
	at org.eclipse.jface.action.MenuManager.access$1(MenuManager.java:470)
	at org.eclipse.jface.action.MenuManager$2.menuShown(MenuManager.java:500)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:255)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1077)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1058)
	at org.eclipse.swt.widgets.Control.WM_INITMENUPOPUP(Control.java:4881)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4557)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2546)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3756)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1053)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:942)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:86)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:588)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:543)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:353)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
	at java.lang.reflect.Method.invoke(Method.java:613)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:629)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:584)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1438)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1414)

!ENTRY org.eclipse.jface 4 0 2023-12-29 16:06:18.739
!MESSAGE /icons/structure/properties_view.gif
!STACK 0
java.io.FileNotFoundException: /icons/structure/properties_view.gif
	at org.eclipse.osgi.framework.internal.protocol.bundleentry.Handler.findBundleEntry(Handler.java:44)
	at org.eclipse.osgi.framework.internal.core.BundleResourceHandler.openConnection(BundleResourceHandler.java:175)
	at java.net.URL.openConnection(URL.java:983)
	at org.eclipse.core.internal.boot.PlatformURLConnection.connect(PlatformURLConnection.java:110)
	at org.eclipse.core.internal.boot.PlatformURLConnection.getURLAsLocal(PlatformURLConnection.java:238)
	at org.eclipse.core.internal.runtime.PlatformURLConverter.toFileURL(PlatformURLConverter.java:36)
	at org.eclipse.core.runtime.FileLocator.toFileURL(FileLocator.java:206)
	at org.eclipse.jface.resource.URLImageDescriptor.getFilePath(URLImageDescriptor.java:137)
	at org.eclipse.jface.resource.URLImageDescriptor.createImage(URLImageDescriptor.java:157)
	at org.eclipse.jface.resource.ImageDescriptor.createResource(ImageDescriptor.java:165)
	at org.eclipse.jface.resource.DeviceResourceManager.allocate(DeviceResourceManager.java:56)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.LocalResourceManager.allocate(LocalResourceManager.java:82)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.ResourceManager.createImage(ResourceManager.java:172)
	at org.eclipse.ui.menus.CommandContributionItem.updateIcons(CommandContributionItem.java:923)
	at org.eclipse.ui.menus.CommandContributionItem.fill(CommandContributionItem.java:445)
	at org.eclipse.ui.internal.ShowViewMenu.fill(ShowViewMenu.java:333)
	at org.eclipse.jface.action.MenuManager.doItemFill(MenuManager.java:746)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:827)
	at org.eclipse.jface.action.MenuManager.handleAboutToShow(MenuManager.java:477)
	at org.eclipse.jface.action.MenuManager.access$1(MenuManager.java:470)
	at org.eclipse.jface.action.MenuManager$2.menuShown(MenuManager.java:500)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:255)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1077)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1058)
	at org.eclipse.swt.widgets.Control.WM_INITMENUPOPUP(Control.java:4881)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4557)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2546)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3756)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1053)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:942)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:86)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:588)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:543)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:353)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
	at java.lang.reflect.Method.invoke(Method.java:613)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:629)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:584)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1438)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1414)

!ENTRY org.eclipse.ui 4 0 2023-12-29 16:06:18.739
!MESSAGE Failed to load image
!STACK 0
org.eclipse.jface.resource.DeviceResourceException: Unable to create resource URLImageDescriptor(platform:/plugin/org.eclipse.wb.core.java/icons/structure/properties_view.gif)
	at org.eclipse.jface.resource.ImageDescriptor.createResource(ImageDescriptor.java:167)
	at org.eclipse.jface.resource.DeviceResourceManager.allocate(DeviceResourceManager.java:56)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.LocalResourceManager.allocate(LocalResourceManager.java:82)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.ResourceManager.createImage(ResourceManager.java:172)
	at org.eclipse.ui.menus.CommandContributionItem.updateIcons(CommandContributionItem.java:923)
	at org.eclipse.ui.menus.CommandContributionItem.fill(CommandContributionItem.java:445)
	at org.eclipse.ui.internal.ShowViewMenu.fill(ShowViewMenu.java:333)
	at org.eclipse.jface.action.MenuManager.doItemFill(MenuManager.java:746)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:827)
	at org.eclipse.jface.action.MenuManager.handleAboutToShow(MenuManager.java:477)
	at org.eclipse.jface.action.MenuManager.access$1(MenuManager.java:470)
	at org.eclipse.jface.action.MenuManager$2.menuShown(MenuManager.java:500)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:255)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1077)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1058)
	at org.eclipse.swt.widgets.Control.WM_INITMENUPOPUP(Control.java:4881)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4557)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2546)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3756)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1053)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:942)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:86)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:588)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:543)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:353)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
	at java.lang.reflect.Method.invoke(Method.java:613)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:629)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:584)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1438)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1414)

!ENTRY org.eclipse.jface 4 0 2023-12-29 16:06:29.910
!MESSAGE /icons/structure/palette.png
!STACK 0
java.io.FileNotFoundException: /icons/structure/palette.png
	at org.eclipse.osgi.framework.internal.protocol.bundleentry.Handler.findBundleEntry(Handler.java:44)
	at org.eclipse.osgi.framework.internal.core.BundleResourceHandler.openConnection(BundleResourceHandler.java:175)
	at java.net.URL.openConnection(URL.java:983)
	at org.eclipse.core.internal.boot.PlatformURLConnection.connect(PlatformURLConnection.java:110)
	at org.eclipse.core.internal.boot.PlatformURLConnection.getURLAsLocal(PlatformURLConnection.java:238)
	at org.eclipse.core.internal.runtime.PlatformURLConverter.toFileURL(PlatformURLConverter.java:36)
	at org.eclipse.core.runtime.FileLocator.toFileURL(FileLocator.java:206)
	at org.eclipse.jface.resource.URLImageDescriptor.getFilePath(URLImageDescriptor.java:137)
	at org.eclipse.jface.resource.URLImageDescriptor.createImage(URLImageDescriptor.java:157)
	at org.eclipse.jface.resource.ImageDescriptor.createResource(ImageDescriptor.java:165)
	at org.eclipse.jface.resource.DeviceResourceManager.allocate(DeviceResourceManager.java:56)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.LocalResourceManager.allocate(LocalResourceManager.java:82)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.ResourceManager.createImage(ResourceManager.java:172)
	at org.eclipse.ui.menus.CommandContributionItem.updateIcons(CommandContributionItem.java:923)
	at org.eclipse.ui.menus.CommandContributionItem.fill(CommandContributionItem.java:445)
	at org.eclipse.ui.internal.ShowViewMenu.fill(ShowViewMenu.java:333)
	at org.eclipse.jface.action.MenuManager.doItemFill(MenuManager.java:746)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:827)
	at org.eclipse.jface.action.MenuManager.handleAboutToShow(MenuManager.java:477)
	at org.eclipse.jface.action.MenuManager.access$1(MenuManager.java:470)
	at org.eclipse.jface.action.MenuManager$2.menuShown(MenuManager.java:500)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:255)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1077)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1058)
	at org.eclipse.swt.widgets.Control.WM_INITMENUPOPUP(Control.java:4881)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4557)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2546)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3756)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1053)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:942)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:86)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:588)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:543)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:353)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
	at java.lang.reflect.Method.invoke(Method.java:613)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:629)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:584)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1438)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1414)

!ENTRY org.eclipse.ui 4 0 2023-12-29 16:06:29.910
!MESSAGE Failed to load image
!STACK 0
org.eclipse.jface.resource.DeviceResourceException: Unable to create resource URLImageDescriptor(platform:/plugin/org.eclipse.wb.core.java/icons/structure/palette.png)
	at org.eclipse.jface.resource.ImageDescriptor.createResource(ImageDescriptor.java:167)
	at org.eclipse.jface.resource.DeviceResourceManager.allocate(DeviceResourceManager.java:56)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.LocalResourceManager.allocate(LocalResourceManager.java:82)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.ResourceManager.createImage(ResourceManager.java:172)
	at org.eclipse.ui.menus.CommandContributionItem.updateIcons(CommandContributionItem.java:923)
	at org.eclipse.ui.menus.CommandContributionItem.fill(CommandContributionItem.java:445)
	at org.eclipse.ui.internal.ShowViewMenu.fill(ShowViewMenu.java:333)
	at org.eclipse.jface.action.MenuManager.doItemFill(MenuManager.java:746)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:827)
	at org.eclipse.jface.action.MenuManager.handleAboutToShow(MenuManager.java:477)
	at org.eclipse.jface.action.MenuManager.access$1(MenuManager.java:470)
	at org.eclipse.jface.action.MenuManager$2.menuShown(MenuManager.java:500)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:255)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1077)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1058)
	at org.eclipse.swt.widgets.Control.WM_INITMENUPOPUP(Control.java:4881)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4557)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2546)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3756)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1053)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:942)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:86)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:588)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:543)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:353)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
	at java.lang.reflect.Method.invoke(Method.java:613)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:629)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:584)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1438)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1414)

!ENTRY org.eclipse.jface 4 0 2023-12-29 16:06:29.910
!MESSAGE /icons/structure/properties_view.gif
!STACK 0
java.io.FileNotFoundException: /icons/structure/properties_view.gif
	at org.eclipse.osgi.framework.internal.protocol.bundleentry.Handler.findBundleEntry(Handler.java:44)
	at org.eclipse.osgi.framework.internal.core.BundleResourceHandler.openConnection(BundleResourceHandler.java:175)
	at java.net.URL.openConnection(URL.java:983)
	at org.eclipse.core.internal.boot.PlatformURLConnection.connect(PlatformURLConnection.java:110)
	at org.eclipse.core.internal.boot.PlatformURLConnection.getURLAsLocal(PlatformURLConnection.java:238)
	at org.eclipse.core.internal.runtime.PlatformURLConverter.toFileURL(PlatformURLConverter.java:36)
	at org.eclipse.core.runtime.FileLocator.toFileURL(FileLocator.java:206)
	at org.eclipse.jface.resource.URLImageDescriptor.getFilePath(URLImageDescriptor.java:137)
	at org.eclipse.jface.resource.URLImageDescriptor.createImage(URLImageDescriptor.java:157)
	at org.eclipse.jface.resource.ImageDescriptor.createResource(ImageDescriptor.java:165)
	at org.eclipse.jface.resource.DeviceResourceManager.allocate(DeviceResourceManager.java:56)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.LocalResourceManager.allocate(LocalResourceManager.java:82)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.ResourceManager.createImage(ResourceManager.java:172)
	at org.eclipse.ui.menus.CommandContributionItem.updateIcons(CommandContributionItem.java:923)
	at org.eclipse.ui.menus.CommandContributionItem.fill(CommandContributionItem.java:445)
	at org.eclipse.ui.internal.ShowViewMenu.fill(ShowViewMenu.java:333)
	at org.eclipse.jface.action.MenuManager.doItemFill(MenuManager.java:746)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:827)
	at org.eclipse.jface.action.MenuManager.handleAboutToShow(MenuManager.java:477)
	at org.eclipse.jface.action.MenuManager.access$1(MenuManager.java:470)
	at org.eclipse.jface.action.MenuManager$2.menuShown(MenuManager.java:500)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:255)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1077)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1058)
	at org.eclipse.swt.widgets.Control.WM_INITMENUPOPUP(Control.java:4881)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4557)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2546)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3756)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1053)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:942)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:86)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:588)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:543)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:353)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
	at java.lang.reflect.Method.invoke(Method.java:613)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:629)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:584)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1438)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1414)

!ENTRY org.eclipse.ui 4 0 2023-12-29 16:06:29.910
!MESSAGE Failed to load image
!STACK 0
org.eclipse.jface.resource.DeviceResourceException: Unable to create resource URLImageDescriptor(platform:/plugin/org.eclipse.wb.core.java/icons/structure/properties_view.gif)
	at org.eclipse.jface.resource.ImageDescriptor.createResource(ImageDescriptor.java:167)
	at org.eclipse.jface.resource.DeviceResourceManager.allocate(DeviceResourceManager.java:56)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.LocalResourceManager.allocate(LocalResourceManager.java:82)
	at org.eclipse.jface.resource.AbstractResourceManager.create(AbstractResourceManager.java:88)
	at org.eclipse.jface.resource.ResourceManager.createImage(ResourceManager.java:172)
	at org.eclipse.ui.menus.CommandContributionItem.updateIcons(CommandContributionItem.java:923)
	at org.eclipse.ui.menus.CommandContributionItem.fill(CommandContributionItem.java:445)
	at org.eclipse.ui.internal.ShowViewMenu.fill(ShowViewMenu.java:333)
	at org.eclipse.jface.action.MenuManager.doItemFill(MenuManager.java:746)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:827)
	at org.eclipse.jface.action.MenuManager.handleAboutToShow(MenuManager.java:477)
	at org.eclipse.jface.action.MenuManager.access$1(MenuManager.java:470)
	at org.eclipse.jface.action.MenuManager$2.menuShown(MenuManager.java:500)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:255)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1077)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1058)
	at org.eclipse.swt.widgets.Control.WM_INITMENUPOPUP(Control.java:4881)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4557)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2541)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:498)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4623)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:341)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1627)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2069)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4976)
	at org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2546)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3756)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1053)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:942)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:86)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:588)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:543)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:353)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)
	at java.lang.reflect.Method.invoke(Method.java:613)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:629)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:584)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1438)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1414)

!ENTRY org.eclipse.jdt.ui 4 10001 2023-12-29 16:49:32.078
!MESSAGE Internal Error
!STACK 1
Java Model Exception: Java Model Status [Unknown javadoc format for ResultSetMetaData {key=Ljava/sql/ResultSetMetaData;} [in ResultSetMetaData.class [in java.sql [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]]
	at org.eclipse.jdt.internal.core.JavadocContents.getTypeDoc(JavadocContents.java:77)
	at org.eclipse.jdt.internal.core.BinaryType.getAttachedJavadoc(BinaryType.java:997)
	at org.eclipse.jdt.internal.ui.text.javadoc.JavadocContentAccess2.getHTMLContent(JavadocContentAccess2.java:463)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:619)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:565)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:557)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:129)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:85)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.core 4 1009 2023-12-29 16:49:32.078
!MESSAGE Unknown javadoc format for ResultSetMetaData {key=Ljava/sql/ResultSetMetaData;} [in ResultSetMetaData.class [in java.sql [in C:\Program Files\IBM\SDP\jdk\jre\lib\rt.jar]]]
